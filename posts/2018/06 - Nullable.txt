<p>Here is a simple question for you: which version of a <code>GetHashCode()</code> is correct and what the performance impact incorrect version would have?<pre style="font-family: ; background: #1e1e1e; color: "><font face="Consolas"><span style="color: "><font color="#569cd6"><font style="font-size: 11pt">public</font></font></span><font style="font-size: 11pt"><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">struct</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#4ec9b0">Struct1</font></span><br></font></font><font style="font-size: 11pt"><font face="Consolas"><font color="#dcdcdc">{<br>&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">public</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">int</font></span><font color="#dcdcdc"> N { </font><span style="color: "><font color="#569cd6">get</font></span></font><font face="Consolas"><font color="#dcdcdc">; }<br>&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">public</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">string</font></span><font color="#dcdcdc"> S { </font><span style="color: "><font color="#569cd6">get</font></span></font><font face="Consolas"><font color="#dcdcdc">; }<br>&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">public</font></span><font color="#dcdcdc"> Struct1(</font><span style="color: "><font color="#569cd6">int</font></span><font color="#dcdcdc"> n, </font><span style="color: "><font color="#569cd6">string</font></span><font color="#dcdcdc"> s </font><span style="color: "><font color="#b4b4b4">=</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">null</font></span><font color="#dcdcdc">) { N </font><span style="color: "><font color="#b4b4b4">=</font></span><font color="#dcdcdc"> n; S </font><span style="color: "><font color="#b4b4b4">=</font></span></font><font face="Consolas"><font color="#dcdcdc"> s; }<br> <br>&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">public</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">override</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">int</font></span><font color="#dcdcdc"> GetHashCode() </font><span style="color: "><font color="#b4b4b4">=&gt;</font></span></font><font face="Consolas"><font color="#dcdcdc">&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; N </font><span style="color: "><font color="#b4b4b4">^</font></span></font><font face="Consolas"><font color="#dcdcdc">&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; S</font><span style="color: "><font color="#b4b4b4">?.</font></span><font color="#dcdcdc">GetHashCode() </font><span style="color: "><font color="#b4b4b4">??</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#b5cea8">0</font></span></font><font face="Consolas"><font color="#dcdcdc">;<br> <br>&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">public</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">override</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">bool</font></span><font color="#dcdcdc"> Equals(</font><span style="color: "><font color="#569cd6">object</font></span><font color="#dcdcdc"> obj) </font><span style="color: "><font color="#b4b4b4">=&gt;</font></span></font><font face="Consolas"><font color="#dcdcdc">&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; obj </font><span style="color: "><font color="#569cd6">is</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#4ec9b0">Struct1</font></span><font color="#dcdcdc"> other </font><span style="color: "><font color="#b4b4b4">&amp;&amp;</font></span><font color="#dcdcdc"> N </font><span style="color: "><font color="#b4b4b4">==</font></span><font color="#dcdcdc"> other</font><span style="color: "><font color="#b4b4b4">.</font></span><font color="#dcdcdc">N </font><span style="color: "><font color="#b4b4b4">&amp;&amp;</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">string</font></span><span style="color: "><font color="#b4b4b4">.</font></span><font color="#dcdcdc">Equals(S, other</font><span style="color: "><font color="#b4b4b4">.</font></span></font><font face="Consolas"><font color="#dcdcdc">S);<br>}<br> </font><br><span style="color: "><font color="#569cd6">public</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">struct</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#4ec9b0">Struct2</font></span><br></font><font face="Consolas"><font color="#dcdcdc">{<br>&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">public</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">int</font></span><font color="#dcdcdc"> N { </font><span style="color: "><font color="#569cd6">get</font></span></font><font face="Consolas"><font color="#dcdcdc">; }<br>&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">public</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">string</font></span><font color="#dcdcdc"> S { </font><span style="color: "><font color="#569cd6">get</font></span></font><font face="Consolas"><font color="#dcdcdc">; }<br>&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">public</font></span><font color="#dcdcdc"> Struct2(</font><span style="color: "><font color="#569cd6">int</font></span><font color="#dcdcdc"> n, </font><span style="color: "><font color="#569cd6">string</font></span><font color="#dcdcdc"> s </font><span style="color: "><font color="#b4b4b4">=</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">null</font></span><font color="#dcdcdc">) { N </font><span style="color: "><font color="#b4b4b4">=</font></span><font color="#dcdcdc"> n; S </font><span style="color: "><font color="#b4b4b4">=</font></span></font><font face="Consolas"><font color="#dcdcdc"> s; }<br> <br>&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">public</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">override</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">int</font></span><font color="#dcdcdc"> GetHashCode() </font><span style="color: "><font color="#b4b4b4">=&gt;</font></span></font><font face="Consolas"><font color="#dcdcdc">&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; S</font><span style="color: "><font color="#b4b4b4">?.</font></span><font color="#dcdcdc">GetHashCode() </font><span style="color: "><font color="#b4b4b4">??</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#b5cea8">0</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#b4b4b4">^</font></span><br></font><font face="Consolas"><font color="#dcdcdc">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; N;<br> <br>&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">public</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">override</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">bool</font></span><font color="#dcdcdc"> Equals(</font><span style="color: "><font color="#569cd6">object</font></span><font color="#dcdcdc"> obj) </font><span style="color: "><font color="#b4b4b4">=&gt;</font></span></font></font><font face="Consolas"><font style="font-size: 11pt"><font color="#dcdcdc">&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; obj </font><span style="color: "><font color="#569cd6">is</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#4ec9b0">Struct1</font></span><font color="#dcdcdc"> other </font><span style="color: "><font color="#b4b4b4">&amp;&amp;</font></span><font color="#dcdcdc"> N </font><span style="color: "><font color="#b4b4b4">==</font></span><font color="#dcdcdc"> other</font><span style="color: "><font color="#b4b4b4">.</font></span><font color="#dcdcdc">N </font><span style="color: "><font color="#b4b4b4">&amp;&amp;</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">string</font></span><span style="color: "><font color="#b4b4b4">.</font></span><font color="#dcdcdc">Equals(S, other</font><span style="color: "><font color="#b4b4b4">.</font></span><font color="#dcdcdc">S);<br>}</font></font></font></pre>
<p>The structs are not perfect (they don't implement <code>IEquatable&lt;T&gt;</code>) but this is not the point. The only difference between the two is the <code>GetHashCode()</code> implementation:<pre style="font-family: ; background: #1e1e1e; color: "><font face="Consolas"><span style="color: "><font color="#57a64a"><font style="font-size: 11pt">// Struct 1</font></font></span><font style="font-size: 11pt"><br><span style="color: "><font color="#569cd6">public</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">override</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">int</font></span><font color="#dcdcdc"> GetHashCode() </font><span style="color: "><font color="#b4b4b4">=&gt;</font></span><br><font color="#dcdcdc">&nbsp;&nbsp;&nbsp; N </font><span style="color: "><font color="#b4b4b4">^</font></span><br><font color="#dcdcdc">&nbsp;&nbsp;&nbsp; S</font><span style="color: "><font color="#b4b4b4">?.</font></span><font color="#dcdcdc">GetHashCode() </font><span style="color: "><font color="#b4b4b4">??</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#b5cea8">0</font></span></font></font><font face="Consolas"><font style="font-size: 11pt"><font color="#dcdcdc">;<br> </font><br><span style="color: "><font color="#57a64a">// Struct 2</font></span><br><span style="color: "><font color="#569cd6">public</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">override</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">int</font></span><font color="#dcdcdc"> GetHashCode() </font><span style="color: "><font color="#b4b4b4">=&gt;</font></span><br><font color="#dcdcdc">&nbsp;&nbsp;&nbsp; S</font><span style="color: "><font color="#b4b4b4">?.</font></span><font color="#dcdcdc">GetHashCode() </font><span style="color: "><font color="#b4b4b4">??</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#b5cea8">0</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#b4b4b4">^</font></span><br><font color="#dcdcdc">&nbsp;&nbsp;&nbsp; N;</font></font></font></pre>
<p>Let's check the behavior using the following simple benchmark:<pre style="font-family: ; background: #1e1e1e; color: "><font face="Consolas"><span style="color: "><font color="#569cd6"><font style="font-size: 11pt">private</font></font></span><font style="font-size: 11pt"><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">const</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">int</font></span><font color="#dcdcdc"> count </font><span style="color: "><font color="#b4b4b4">=</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#b5cea8">10000</font></span><font color="#dcdcdc">;</font><br><span style="color: "><font color="#569cd6">private</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">static</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#4ec9b0">Struct1</font></span><font color="#dcdcdc">[] _arrayStruct1 </font><span style="color: "><font color="#b4b4b4">=</font></span><br><font color="#dcdcdc">&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#4ec9b0">Enumerable</font></span><span style="color: "><font color="#b4b4b4">.</font></span><font color="#dcdcdc">Range(</font><span style="color: "><font color="#b5cea8">1</font></span><font color="#dcdcdc">, count)</font><span style="color: "><font color="#b4b4b4">.</font></span><font color="#dcdcdc">Select(n </font><span style="color: "><font color="#b4b4b4">=&gt;</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">new</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#4ec9b0">Struct1</font></span><font color="#dcdcdc">(n))</font><span style="color: "><font color="#b4b4b4">.</font></span><font color="#dcdcdc">ToArray();</font><br><span style="color: "><font color="#569cd6">private</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">static</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#4ec9b0">Struct2</font></span><font color="#dcdcdc">[] _arrayStruct2 </font><span style="color: "><font color="#b4b4b4">=</font></span><br><font color="#dcdcdc">&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#4ec9b0">Enumerable</font></span><span style="color: "><font color="#b4b4b4">.</font></span><font color="#dcdcdc">Range(</font><span style="color: "><font color="#b5cea8">1</font></span><font color="#dcdcdc">, count)</font><span style="color: "><font color="#b4b4b4">.</font></span><font color="#dcdcdc">Select(n </font><span style="color: "><font color="#b4b4b4">=&gt;</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">new</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#4ec9b0">Struct2</font></span><font color="#dcdcdc">(n))</font><span style="color: "><font color="#b4b4b4">.</font></span></font></font><font style="font-size: 11pt"><font face="Consolas"><font color="#dcdcdc">ToArray();<br> <br>[</font><span style="color: "><font color="#4ec9b0">Benchmark</font></span><font color="#dcdcdc">]</font><br><span style="color: "><font color="#569cd6">public</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">int</font></span><font color="#dcdcdc"> Struct1() </font><span style="color: "><font color="#b4b4b4">=&gt;</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">new</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#4ec9b0">HashSet</font></span><font color="#dcdcdc">&lt;</font><span style="color: "><font color="#4ec9b0">Struct1</font></span><font color="#dcdcdc">&gt;(_arrayStruct1)</font><span style="color: "><font color="#b4b4b4">.</font></span></font></font><font face="Consolas"><font style="font-size: 11pt"><font color="#dcdcdc">Count;<br> <br>[</font><span style="color: "><font color="#4ec9b0">Benchmark</font></span><font color="#dcdcdc">]</font><br><span style="color: "><font color="#569cd6">public</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">int</font></span><font color="#dcdcdc"> Struct2() </font><span style="color: "><font color="#b4b4b4">=&gt;</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">new</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#4ec9b0">HashSet</font></span><font color="#dcdcdc">&lt;</font><span style="color: "><font color="#4ec9b0">Struct2</font></span><font color="#dcdcdc">&gt;(_arrayStruct2)</font><span style="color: "><font color="#b4b4b4">.</font></span><font color="#dcdcdc">Count;</font></font></font></pre>
<p>The results are:<pre><code><p>  Method |         Mean |        Error |       StdDev |
-------- |-------------:|-------------:|-------------:|
 Struct1 | 736,298.4 us | 4,224.637 us | 3,745.030 us |
 Struct2 |     353.8 us |     2.382 us |     1.989 us |
</p></code></pre>
<p>Wow! The <code>Struct2</code> is 2000 times faster! This definitely means that the second implementation is correct and the first one is not! Right? Actually, not.
<p>Both implementations are incorrect and just by an accident the second one "works better" in this particular case. Let's take closer look at the <code>GetHashCode</code> method for <code>Struct1</code>:<pre style="font-family: ; background: #1e1e1e; color: "><font face="Consolas"><span style="color: "><font color="#569cd6"><font style="font-size: 11pt">public</font></font></span><font style="font-size: 11pt"><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">override</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">int</font></span><font color="#dcdcdc"> GetHashCode() </font><span style="color: "><font color="#b4b4b4">=&gt;</font></span><font color="#dcdcdc"> N </font><span style="color: "><font color="#b4b4b4">^</font></span><font color="#dcdcdc"> S</font><span style="color: "><font color="#b4b4b4">?.</font></span><font color="#dcdcdc">GetHashCode() </font><span style="color: "><font color="#b4b4b4">??</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#b5cea8">0</font></span><font color="#dcdcdc">;</font></font></font></pre>
<p>You may think that this statement is equivalent to <code>N ^ (S?.GetHashCode() ?? 0)</code>but it is actually equivalent to <code>(N ^ S?.GetHashCode()) ?? 0</code>:<pre style="font-family: ; background: #1e1e1e; color: "><font face="Consolas"><span style="color: "><font color="#569cd6"><font style="font-size: 11pt">public</font></font></span><font style="font-size: 11pt"><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">override</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">int</font></span></font></font><font style="font-size: 11pt"><font face="Consolas"><font color="#dcdcdc"> GetHashCode()<br>{<br>&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">int</font></span><span style="color: "><font color="#b4b4b4">?</font></span><font color="#dcdcdc"> num </font><span style="color: "><font color="#b4b4b4">=</font></span><font color="#dcdcdc"> N </font><span style="color: "><font color="#b4b4b4">^</font></span><font color="#dcdcdc"> ((S </font><span style="color: "><font color="#b4b4b4">!=</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">null</font></span><font color="#dcdcdc">) </font><span style="color: "><font color="#b4b4b4">?</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">new</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">int</font></span><span style="color: "><font color="#b4b4b4">?</font></span><font color="#dcdcdc">(S</font><span style="color: "><font color="#b4b4b4">.</font></span><font color="#dcdcdc">GetHashCode()) </font><span style="color: "><font color="#b4b4b4">:</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">null</font></span></font><font face="Consolas"><font color="#dcdcdc">);<br> <br>&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">if</font></span><font color="#dcdcdc"> (num </font><span style="color: "><font color="#b4b4b4">==</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">null</font></span></font><font face="Consolas"><font color="#dcdcdc">)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">return</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#b5cea8">0</font></span></font></font><font face="Consolas"><font style="font-size: 11pt"><font color="#dcdcdc">;<br> <br>&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">return</font></span><font color="#dcdcdc"> num</font><span style="color: "><font color="#b4b4b4">.</font></span><font color="#dcdcdc">GetValueOrDefault();<br>}</font></font></font></pre>
<p>Now it is way more obvious why the <code>Struct1</code> is so slow: when <code>S</code> property is <code>null</code>(which is always the case in this example), the hash code is <code>0</code> regardless of the <code>N</code>because <code>N ^ (int?)null</code> is <code>null</code>. And trying to add 10000 values with the same hash code effectively converts the hash set into a linked list drastically affecting the performance.
<p>But the second implementation is also wrong:<pre style="font-family: ; background: #1e1e1e; color: "><font face="Consolas"><span style="color: "><font color="#569cd6"><font style="font-size: 11pt">public</font></font></span><font style="font-size: 11pt"><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">override</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">int</font></span><font color="#dcdcdc"> GetHashCode() </font><span style="color: "><font color="#b4b4b4">=&gt;</font></span><font color="#dcdcdc"> S</font><span style="color: "><font color="#b4b4b4">?.</font></span><font color="#dcdcdc">GetHashCode() </font><span style="color: "><font color="#b4b4b4">??</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#b5cea8">0</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#b4b4b4">^</font></span><font color="#dcdcdc"> N;</font></font></font></pre>
<p>Is equivalent to:<pre style="font-family: ; background: #1e1e1e; color: "><font face="Consolas"><span style="color: "><font color="#569cd6"><font style="font-size: 11pt">public</font></font></span><font style="font-size: 11pt"><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">override</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">int</font></span></font></font><font style="font-size: 11pt"><font face="Consolas"><font color="#dcdcdc"> GetHashCode()<br>{<br>&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">if</font></span><font color="#dcdcdc"> (S </font><span style="color: "><font color="#b4b4b4">==</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">null</font></span></font><font face="Consolas"><font color="#dcdcdc">)<br>&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">return</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#b5cea8">0</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#b4b4b4">^</font></span></font></font><font face="Consolas"><font style="font-size: 11pt"><font color="#dcdcdc"> N;<br>&nbsp;&nbsp;&nbsp; }<br> <br>&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">return</font></span><font color="#dcdcdc"> S</font><span style="color: "><font color="#b4b4b4">.</font></span><font color="#dcdcdc">GetHashCode();<br>}</font></font></font></pre>
<p>In this particular case, this implementation gives us way better distribution, but just because the <code>S</code> is always null. In other scenarios, this hash function could be terrible and could give the same value for a large set of instances as well.
<h4>Conclusion</h4>
<p>There are two reasons why the expression <code>N ^ S?.GetHashCode()??0</code> gives us not what we could expect. C# supports the notion of lifted operators that allows mixing nullable and non-nullable values together in one expression: <code>42 ^ (int?)null</code> is <code>null</code>. Second, the priority of null-coalescing operator (<code>??</code>) is lower than the priority of <code>^</code>.
<p>Operator precedence for some operators is so obvious that we can omit explicit parens around them. In case of the null-coalescing operator, the precedence could be tricky so use parenthesis to clarify your meaning.
<h4>Additional references</h4>
<ul>
<li><a href="https://blogs.msdn.microsoft.com/ericlippert/2007/06/27/what-exactly-does-lifted-mean/">What exactly does 'lifted' mean?</a> by Eric Lippert 
<li><a href="https://stackoverflow.com/questions/3370110/what-are-lifted-operators">What are lifted operators?</a></li></ul>