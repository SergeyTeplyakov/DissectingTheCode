<p>In the <a href="$">previous blog post</a> we discussed how the C# compiler transforms asynchronous methods. In this post, we'll focus on extensibility points the C# compiler provides for customizing the behavior of async methods.
<p>There are 3 ways how you can control the async method's machinery:
<ol>
<li>Provide your own async method builder in the <code>System.Runtime.CompilerServices</code> namespace. 
<li>Use custom task awaiters. 
<li>Define your own task-like types.</li></ol>
<h4>Custom types fromm <code>System.Runtime.CompilerServices</code> namespace</h4>
<p>As we know from the previous post, the C# compiler transforms async methods into a generated state machine that relies on some predefined types. But the C# compiler does not expect that these well-known types come from a specific assembly. For instance, you can provide your own implementation of <a href="http://referencesource.microsoft.com/#mscorlib/system/runtime/compilerservices/AsyncMethodBuilder.cs,b07562c618ee846c"><code>AsyncVoidMethodBuilder</code></a> in your project and the C# compiler will "bind" async machinery to your custom type.
<p>This is a good way to explore what the underlying transformations are and to see what's happening at runtime:<pre style="font-family: ; background: #1e1e1e; color: "><font face="Consolas"><span style="color: "><font color="#569cd6"><font style="font-size: 11pt">namespace</font></font></span><font style="font-size: 11pt"><font color="#dcdcdc"> System</font><span style="color: "><font color="#b4b4b4">.</font></span><font color="#dcdcdc">Runtime</font><span style="color: "><font color="#b4b4b4">.</font></span></font></font><font style="font-size: 11pt"><font face="Consolas"><font color="#dcdcdc">CompilerServices<br>{<br>&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#57a64a">// AsyncVoidMethodBuilder.cs in your project</font></span><br><font color="#dcdcdc">&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">public</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">class</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#4ec9b0">AsyncVoidMethodBuilder</font></span><br></font><font face="Consolas"><font color="#dcdcdc">&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">public</font></span></font><font face="Consolas"><font color="#dcdcdc"> AsyncVoidMethodBuilder()<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#b4b4b4">=&gt;</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#4ec9b0">Console</font></span><span style="color: "><font color="#b4b4b4">.</font></span><font color="#dcdcdc">WriteLine(</font><span style="color: "><font color="#d69d85">".ctor"</font></span></font><font face="Consolas"><font color="#dcdcdc">);<br> <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">public</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">static</font></span></font><font face="Consolas"><font color="#dcdcdc"> AsyncVoidMethodBuilder Create()<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#b4b4b4">=&gt;</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">new</font></span></font><font face="Consolas"><font color="#dcdcdc"> AsyncVoidMethodBuilder();<br> <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">public</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">void</font></span><font color="#dcdcdc"> SetResult() </font><span style="color: "><font color="#b4b4b4">=&gt;</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#4ec9b0">Console</font></span><span style="color: "><font color="#b4b4b4">.</font></span><font color="#dcdcdc">WriteLine(</font><span style="color: "><font color="#d69d85">"SetResult"</font></span></font><font face="Consolas"><font color="#dcdcdc">);<br> <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">public</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">void</font></span><font color="#dcdcdc"> Start&lt;</font><span style="color: "><font color="#b8d7a3">TStateMachine</font></span><font color="#dcdcdc">&gt;(</font><span style="color: "><font color="#569cd6">ref</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#b8d7a3">TStateMachine</font></span></font><font face="Consolas"><font color="#dcdcdc"> stateMachine)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">where</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#b8d7a3">TStateMachine</font></span><font color="#dcdcdc"> : </font><span style="color: "><font color="#b8d7a3">IAsyncStateMachine</font></span><br></font><font face="Consolas"><font color="#dcdcdc">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#4ec9b0">Console</font></span><span style="color: "><font color="#b4b4b4">.</font></span><font color="#dcdcdc">WriteLine(</font><span style="color: "><font color="#d69d85">"Start"</font></span></font><font face="Consolas"><font color="#dcdcdc">);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; stateMachine</font><span style="color: "><font color="#b4b4b4">.</font></span></font></font><font face="Consolas"><font style="font-size: 11pt"><font color="#dcdcdc">MoveNext();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br> <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#57a64a">// AwaitOnCompleted, AwaitUnsafeOnCompleted, SetException </font></span><br><font color="#dcdcdc">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#57a64a">// and SetStateMachine are empty</font></span><br><font color="#dcdcdc">&nbsp;&nbsp;&nbsp; }&nbsp;&nbsp; <br>}</font></font></font></pre>
<p>Now, every async method in your project will use the custom version of <code>AsyncVoidMethodBuilder</code>. We can test this with a simple async method:<pre style="font-family: ; background: #1e1e1e; color: "><font face="Consolas"><font color="#dcdcdc"><font style="font-size: 11pt">[</font></font><font style="font-size: 11pt"><span style="color: "><font color="#4ec9b0">Test</font></span><font color="#dcdcdc">]</font><br><span style="color: "><font color="#569cd6">public</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">void</font></span></font></font><font style="font-size: 11pt"><font face="Consolas"><font color="#dcdcdc"> RunAsyncVoid()<br>{<br>&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#4ec9b0">Console</font></span><span style="color: "><font color="#b4b4b4">.</font></span><font color="#dcdcdc">WriteLine(</font><span style="color: "><font color="#d69d85">"Before VoidAsync"</font></span></font><font face="Consolas"><font color="#dcdcdc">);<br>&nbsp;&nbsp;&nbsp; VoidAsync();<br>&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#4ec9b0">Console</font></span><span style="color: "><font color="#b4b4b4">.</font></span><font color="#dcdcdc">WriteLine(</font><span style="color: "><font color="#d69d85">"After VoidAsync"</font></span></font></font><font face="Consolas"><font style="font-size: 11pt"><font color="#dcdcdc">);<br> <br>&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">async</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">void</font></span><font color="#dcdcdc"> VoidAsync() { }<br>}</font></font></font></pre>
<p>The output of this test is:<pre><code><p>Before VoidAsync
.ctor
Start
SetResult
After VoidAsync
</p></code></pre>
<p>You can implement <code>UnsafeAwaitOnComplete</code> method to test the behavior of an async method with <code>await</code> clause that returns non-completed task as well. The full example can be found at <a href="https://github.com/SergeyTeplyakov/EduAsync/blob/master/src/01_AsyncVoidBuilder/AsyncVoidSample.cs">github</a>.
<p>To change the behavior for <code>async Task</code> and <code>async Task&lt;T&gt;</code> methods you should provide your own version of <a href="http://referencesource.microsoft.com/#mscorlib/system/runtime/compilerservices/AsyncMethodBuilder.cs,c983aa3f7c40052f"><code>AsyncTaskMethodBuilder</code></a> and <a href="http://referencesource.microsoft.com/#mscorlib/system/runtime/compilerservices/AsyncMethodBuilder.cs,5916df9e324fc0a1"><code>AsyncTaskMethodBuilder&lt;T&gt;</code></a>
<p>The full example with these types can be found at my github project called <a href="https://github.com/SergeyTeplyakov/EduAsync">EduAsync</a> (*) in <a href="https://github.com/SergeyTeplyakov/EduAsync/blob/master/src/02_AsyncTaskBuilder/AsyncTaskMethodBuilder.cs">AsyncTaskBuilder.cs</a> and <a href="https://github.com/SergeyTeplyakov/EduAsync/blob/master/src/03_AsyncTaskBuilderOfT/AsyncTaskMethodBuilderOfT.cs">AsyncTaskMethodBuilderOfT.cs</a> respectively.
<p>(*) Thanks <a href="https://codeblog.jonskeet.uk/category/eduasync/">Jon Skeet</a> for inspiration for this project. This is a really good way to learn async machinery deeper.
<h4>Custom awaiters</h4>
<p>The previous example is "hacky" and not suitable for production. We can learn the async machinery that way, but you definitely don't want to see such a code in your codebase. The C# language authors built-in proper extensibility points into the compiler that allows to "await" different types in async methods.
<p>In order for a type to be "awaitable" (i.e. to be valid in the context of an <code>await</code> expression) the type should follow a special pattern:
<ul>
<li>Compiler should be able to find an instance or an extension method called <code>GetAwaiter</code>. The return type of this method should follow certain requirements: 
<li>The type should implement <a href="http://referencesource.microsoft.com/#mscorlib/system/runtime/compilerservices/INotifyCompletion.cs,23"><code>INotifyCompletion</code></a> interface. 
<li>The type should have <code>bool IsCompleted {get;}</code> property and <code>T GetResult()</code> method.</li></ul>
<p>This means that we can easily make <code>Lazy&lt;T&gt;</code> awaitable:<pre style="font-family: ; background: #1e1e1e"><font face="Consolas"><span style="color: "><font color="#569cd6"><font style="font-size: 11pt">public</font></font></span><font style="font-size: 11pt"><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">struct</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#4ec9b0">LazyAwaiter</font></span><font color="#dcdcdc">&lt;</font><span style="color: "><font color="#b8d7a3">T</font></span><font color="#dcdcdc">&gt; : </font><span style="color: "><font color="#b8d7a3">INotifyCompletion</font></span><br></font></font><font style="font-size: 11pt"><font face="Consolas"><font color="#dcdcdc">{<br>&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">private</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">readonly</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#4ec9b0">Lazy</font></span><font color="#dcdcdc">&lt;</font><span style="color: "><font color="#b8d7a3">T</font></span></font><font face="Consolas"><font color="#dcdcdc">&gt; _lazy;<br> <br>&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">public</font></span><font color="#dcdcdc"> LazyAwaiter(</font><span style="color: "><font color="#4ec9b0">Lazy</font></span><font color="#dcdcdc">&lt;</font><span style="color: "><font color="#b8d7a3">T</font></span><font color="#dcdcdc">&gt; lazy) </font><span style="color: "><font color="#b4b4b4">=&gt;</font></span><font color="#dcdcdc"> _lazy </font><span style="color: "><font color="#b4b4b4">=</font></span></font><font face="Consolas"><font color="#dcdcdc"> lazy;<br> <br>&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">public</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#b8d7a3">T</font></span><font color="#dcdcdc"> GetResult() </font><span style="color: "><font color="#b4b4b4">=&gt;</font></span><font color="#dcdcdc"> _lazy</font><span style="color: "><font color="#b4b4b4">.</font></span></font><font face="Consolas"><font color="#dcdcdc">Value;<br> <br>&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">public</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">bool</font></span><font color="#dcdcdc"> IsCompleted </font><span style="color: "><font color="#b4b4b4">=&gt;</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">true</font></span></font><font face="Consolas"><font color="#dcdcdc">;<br> <br>&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">public</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">void</font></span><font color="#dcdcdc"> OnCompleted(</font><span style="color: "><font color="#4ec9b0">Action</font></span></font><font face="Consolas"><font color="#dcdcdc"> continuation) { }<br>}<br> </font><br><span style="color: "><font color="#569cd6">public</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">static</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">class</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#4ec9b0">LazyAwaiterExtensions</font></span><br></font><font face="Consolas"><font color="#dcdcdc">{<br>&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">public</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">static</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#4ec9b0">LazyAwaiter</font></span><font color="#dcdcdc">&lt;</font><span style="color: "><font color="#b8d7a3">T</font></span><font color="#dcdcdc">&gt; GetAwaiter&lt;</font><span style="color: "><font color="#b8d7a3">T</font></span><font color="#dcdcdc">&gt;(</font><span style="color: "><font color="#569cd6">this</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#4ec9b0">Lazy</font></span><font color="#dcdcdc">&lt;</font><span style="color: "><font color="#b8d7a3">T</font></span></font></font><font face="Consolas"><font style="font-size: 11pt"><font color="#dcdcdc">&gt; lazy)<br>&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">return</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">new</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#4ec9b0">LazyAwaiter</font></span><font color="#dcdcdc">&lt;</font><span style="color: "><font color="#b8d7a3">T</font></span><font color="#dcdcdc">&gt;(lazy);<br>&nbsp;&nbsp;&nbsp; }<br>}</font></font></font></pre><pre style="font-family: ; background: #1e1e1e; color: "><font face="Consolas"><span style="color: "><font color="#569cd6"><font style="font-size: 11pt">public</font></font></span><font style="font-size: 11pt"><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">static</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">async</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#4ec9b0">Task</font></span></font></font><font style="font-size: 11pt"><font face="Consolas"><font color="#dcdcdc"> Foo()<br>{<br>&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">var</font></span><font color="#dcdcdc"> lazy </font><span style="color: "><font color="#b4b4b4">=</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">new</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#4ec9b0">Lazy</font></span><font color="#dcdcdc">&lt;</font><span style="color: "><font color="#569cd6">int</font></span><font color="#dcdcdc">&gt;(() </font><span style="color: "><font color="#b4b4b4">=&gt;</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#b5cea8">42</font></span></font><font face="Consolas"><font color="#dcdcdc">);<br>&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">var</font></span><font color="#dcdcdc"> result </font><span style="color: "><font color="#b4b4b4">=</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">await</font></span></font></font><font face="Consolas"><font style="font-size: 11pt"><font color="#dcdcdc"> lazy;<br>&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#4ec9b0">Console</font></span><span style="color: "><font color="#b4b4b4">.</font></span><font color="#dcdcdc">WriteLine(result);<br>}</font></font></font></pre>
<p>The example could be looked too contrived but this extensibility point is actually very helpful and is used in the wild. For instance, <a href="https://github.com/Reactive-Extensions/Rx.NET">Reactive Extensions for .NET</a> provides a <a href="https://github.com/Reactive-Extensions/Rx.NET/blob/fa1629a1e12a8fc21c95aeff7863425c2485defd/Rx.NET/Source/src/System.Reactive/Linq/Observable.Awaiter.cs#L21">custom awaiter</a> for awaiting <code>IObservable&lt;T&gt;</code> instances in async methods. The BCL itself has <a href="http://referencesource.microsoft.com/#mscorlib/system/runtime/compilerservices/YieldAwaitable.cs,45"><code>YieldAwaitable</code></a> used by <a href="http://referencesource.microsoft.com/#mscorlib/system/threading/Tasks/Task.cs,3031"><code>Task.Yield</code></a>and <a href="http://referencesource.microsoft.com/#mscorlib/system/security/cryptography/cryptostream.cs,328"><code>HopToThreadPoolAwaitable</code></a>:<pre style="font-family: ; background: #1e1e1e; color: "><font face="Consolas"><span style="color: "><font color="#569cd6"><font style="font-size: 11pt">public</font></font></span><font style="font-size: 11pt"><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">struct</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#4ec9b0">HopToThreadPoolAwaitable</font></span><font color="#dcdcdc"> : </font><span style="color: "><font color="#b8d7a3">INotifyCompletion</font></span><br></font></font><font style="font-size: 11pt"><font face="Consolas"><font color="#dcdcdc">{<br>&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">public</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#4ec9b0">HopToThreadPoolAwaitable</font></span><font color="#dcdcdc"> GetAwaiter() </font><span style="color: "><font color="#b4b4b4">=&gt;</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">this</font></span></font><font face="Consolas"><font color="#dcdcdc">;<br>&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">public</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">bool</font></span><font color="#dcdcdc"> IsCompleted </font><span style="color: "><font color="#b4b4b4">=&gt;</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">false</font></span></font><font face="Consolas"><font color="#dcdcdc">;<br> <br>&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">public</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">void</font></span><font color="#dcdcdc"> OnCompleted(</font><span style="color: "><font color="#4ec9b0">Action</font></span><font color="#dcdcdc"> continuation) </font><span style="color: "><font color="#b4b4b4">=&gt;</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#4ec9b0">Task</font></span><span style="color: "><font color="#b4b4b4">.</font></span></font></font><font face="Consolas"><font style="font-size: 11pt"><font color="#dcdcdc">Run(continuation);<br>&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">public</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">void</font></span><font color="#dcdcdc"> GetResult() { }<br>}</font></font></font></pre>
<p>The following unit test demonstrates the last awaiter in action:<pre style="font-family: ; background: #1e1e1e; color: "><font face="Consolas"><font color="#dcdcdc"><font style="font-size: 11pt">[</font></font><font style="font-size: 11pt"><span style="color: "><font color="#4ec9b0">Test</font></span><font color="#dcdcdc">]</font><br><span style="color: "><font color="#569cd6">public</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">async</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#4ec9b0">Task</font></span></font></font><font style="font-size: 11pt"><font face="Consolas"><font color="#dcdcdc"> Test()<br>{<br>&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">var</font></span><font color="#dcdcdc"> testThreadId </font><span style="color: "><font color="#b4b4b4">=</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#4ec9b0">Thread</font></span><span style="color: "><font color="#b4b4b4">.</font></span><font color="#dcdcdc">CurrentThread</font><span style="color: "><font color="#b4b4b4">.</font></span></font><font face="Consolas"><font color="#dcdcdc">ManagedThreadId;<br>&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">await</font></span></font><font face="Consolas"><font color="#dcdcdc"> Sample();<br> <br>&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">async</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#4ec9b0">Task</font></span></font><font face="Consolas"><font color="#dcdcdc"> Sample()<br>&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#4ec9b0">Assert</font></span><span style="color: "><font color="#b4b4b4">.</font></span><font color="#dcdcdc">AreEqual(</font><span style="color: "><font color="#4ec9b0">Thread</font></span><span style="color: "><font color="#b4b4b4">.</font></span><font color="#dcdcdc">CurrentThread</font><span style="color: "><font color="#b4b4b4">.</font></span></font><font face="Consolas"><font color="#dcdcdc">ManagedThreadId, testThreadId);<br> <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">await</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">default</font></span><font color="#dcdcdc">(</font><span style="color: "><font color="#4ec9b0">HopToThreadPoolAwaitable</font></span></font></font><font face="Consolas"><font style="font-size: 11pt"><font color="#dcdcdc">);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#4ec9b0">Assert</font></span><span style="color: "><font color="#b4b4b4">.</font></span><font color="#dcdcdc">AreNotEqual(</font><span style="color: "><font color="#4ec9b0">Thread</font></span><span style="color: "><font color="#b4b4b4">.</font></span><font color="#dcdcdc">CurrentThread</font><span style="color: "><font color="#b4b4b4">.</font></span><font color="#dcdcdc">ManagedThreadId, testThreadId);<br>&nbsp;&nbsp;&nbsp; }<br>}</font></font></font></pre>
<p>The first part of any "async" method (before the first <code>await</code> statement) runs synchronously. In most cases, this is fine and desirable for eager argument validation, but sometimes we would like to make sure that the method body would not block the caller's thread. <code>HopToThreadPoolAwaitable</code> makes sure that the rest of the method is executed in the thread pool thread rather than in the caller's thread.
<h4>Task-like types</h4>
<p>Custom awaiters were available from the very first version of the compiler that supported async/await (i.e. from C# 5). This extensibility point is very useful but limited because all the async methods should've returned <code>void</code>, <code>Task</code> or <code>Task&lt;T&gt;</code>. Starting from C# 7.2 the compiler support task-like types.
<p><a href="https://github.com/dotnet/roslyn/blob/master/docs/features/task-types.md">Task-like type</a> is a class or a struct with an associated <em>builder type</em> identified by <code>AsyncMethodBuilderAttribute</code> (**). To make the task-like type useful it should be <em>awaitable</em> in a way we describe in the previous section. Basically, task-like types combine the first two extensibility points described before by making the first way officially supported one.
<p>(**) Today you have to define this attribute yourself. The example can be found at <a href="https://github.com/SergeyTeplyakov/EduAsync/blob/master/src/07_CustomTaskLikeTypes/AsyncMethodBuilder.cs#L9">my github repo</a>.
<p>Here is a simple example of a custom task-like type defined as a struct:<pre style="font-family: ; background: #1e1e1e; color: "><font face="Consolas"><span style="color: "><font color="#569cd6"><font style="font-size: 11pt">public</font></font></span><font style="font-size: 11pt"><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">sealed</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">class</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#4ec9b0">TaskLikeMethodBuilder</font></span><br></font></font><font style="font-size: 11pt"><font face="Consolas"><font color="#dcdcdc">{<br>&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">public</font></span></font><font face="Consolas"><font color="#dcdcdc"> TaskLikeMethodBuilder()<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#b4b4b4">=&gt;</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#4ec9b0">Console</font></span><span style="color: "><font color="#b4b4b4">.</font></span><font color="#dcdcdc">WriteLine(</font><span style="color: "><font color="#d69d85">".ctor"</font></span></font><font face="Consolas"><font color="#dcdcdc">);<br> <br>&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">public</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">static</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#4ec9b0">TaskLikeMethodBuilder</font></span></font><font face="Consolas"><font color="#dcdcdc"> Create()<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#b4b4b4">=&gt;</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">new</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#4ec9b0">TaskLikeMethodBuilder</font></span></font><font face="Consolas"><font color="#dcdcdc">();<br> <br>&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">public</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">void</font></span><font color="#dcdcdc"> SetResult() </font><span style="color: "><font color="#b4b4b4">=&gt;</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#4ec9b0">Console</font></span><span style="color: "><font color="#b4b4b4">.</font></span><font color="#dcdcdc">WriteLine(</font><span style="color: "><font color="#d69d85">"SetResult"</font></span></font><font face="Consolas"><font color="#dcdcdc">);<br> <br>&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">public</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">void</font></span><font color="#dcdcdc"> Start&lt;</font><span style="color: "><font color="#b8d7a3">TStateMachine</font></span><font color="#dcdcdc">&gt;(</font><span style="color: "><font color="#569cd6">ref</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#b8d7a3">TStateMachine</font></span></font><font face="Consolas"><font color="#dcdcdc"> stateMachine)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">where</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#b8d7a3">TStateMachine</font></span><font color="#dcdcdc"> : </font><span style="color: "><font color="#b8d7a3">IAsyncStateMachine</font></span><br></font><font face="Consolas"><font color="#dcdcdc">&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#4ec9b0">Console</font></span><span style="color: "><font color="#b4b4b4">.</font></span><font color="#dcdcdc">WriteLine(</font><span style="color: "><font color="#d69d85">"Start"</font></span></font><font face="Consolas"><font color="#dcdcdc">);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; stateMachine</font><span style="color: "><font color="#b4b4b4">.</font></span></font><font face="Consolas"><font color="#dcdcdc">MoveNext();<br>&nbsp;&nbsp;&nbsp; }<br> <br>&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">public</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#4ec9b0">TaskLike</font></span><font color="#dcdcdc"> Task </font><span style="color: "><font color="#b4b4b4">=&gt;</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">default</font></span><font color="#dcdcdc">(</font><span style="color: "><font color="#4ec9b0">TaskLike</font></span></font><font face="Consolas"><font color="#dcdcdc">);<br> <br>&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#57a64a">// AwaitOnCompleted, AwaitUnsafeOnCompleted, SetException </font></span><br><font color="#dcdcdc">&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#57a64a">// and SetStateMachine are empty</font></span><br><font color="#dcdcdc">&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">public</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">void</font></span><font color="#dcdcdc"> AwaitOnCompleted&lt;</font><span style="color: "><font color="#b8d7a3">TAwaiter</font></span><font color="#dcdcdc">, </font><span style="color: "><font color="#b8d7a3">TStateMachine</font></span></font><font face="Consolas"><font color="#dcdcdc">&gt;(<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">ref</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#b8d7a3">TAwaiter</font></span><font color="#dcdcdc"> awaiter, </font><span style="color: "><font color="#569cd6">ref</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#b8d7a3">TStateMachine</font></span></font><font face="Consolas"><font color="#dcdcdc"> stateMachine)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">where</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#b8d7a3">TAwaiter</font></span><font color="#dcdcdc"> : </font><span style="color: "><font color="#b8d7a3">INotifyCompletion</font></span><br><font color="#dcdcdc">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">where</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#b8d7a3">TStateMachine</font></span><font color="#dcdcdc"> : </font><span style="color: "><font color="#b8d7a3">IAsyncStateMachine</font></span><br></font><font face="Consolas"><font color="#dcdcdc">&nbsp;&nbsp;&nbsp; { }<br> <br>&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">public</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">void</font></span><font color="#dcdcdc"> AwaitUnsafeOnCompleted&lt;</font><span style="color: "><font color="#b8d7a3">TAwaiter</font></span><font color="#dcdcdc">, </font><span style="color: "><font color="#b8d7a3">TStateMachine</font></span></font><font face="Consolas"><font color="#dcdcdc">&gt;(<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">ref</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#b8d7a3">TAwaiter</font></span><font color="#dcdcdc"> awaiter, </font><span style="color: "><font color="#569cd6">ref</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#b8d7a3">TStateMachine</font></span></font><font face="Consolas"><font color="#dcdcdc"> stateMachine)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">where</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#b8d7a3">TAwaiter</font></span><font color="#dcdcdc"> : </font><span style="color: "><font color="#b8d7a3">ICriticalNotifyCompletion</font></span><br><font color="#dcdcdc">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">where</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#b8d7a3">TStateMachine</font></span><font color="#dcdcdc"> : </font><span style="color: "><font color="#b8d7a3">IAsyncStateMachine</font></span><br></font><font face="Consolas"><font color="#dcdcdc">&nbsp;&nbsp;&nbsp; { }<br> <br>&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">public</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">void</font></span><font color="#dcdcdc"> SetException(</font><span style="color: "><font color="#4ec9b0">Exception</font></span></font><font face="Consolas"><font color="#dcdcdc"> e) { }<br> <br>&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">public</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">void</font></span><font color="#dcdcdc"> SetStateMachine(</font><span style="color: "><font color="#b8d7a3">IAsyncStateMachine</font></span></font><font face="Consolas"><font color="#dcdcdc"> stateMachine) { }<br>}<br> <br>[System</font><span style="color: "><font color="#b4b4b4">.</font></span><font color="#dcdcdc">Runtime</font><span style="color: "><font color="#b4b4b4">.</font></span><font color="#dcdcdc">CompilerServices</font><span style="color: "><font color="#b4b4b4">.</font></span><span style="color: "><font color="#4ec9b0">AsyncMethodBuilder</font></span><font color="#dcdcdc">(</font><span style="color: "><font color="#569cd6">typeof</font></span><font color="#dcdcdc">(</font><span style="color: "><font color="#4ec9b0">TaskLikeMethodBuilder</font></span><font color="#dcdcdc">))]</font><br><span style="color: "><font color="#569cd6">public</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">struct</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#4ec9b0">TaskLike</font></span><br></font><font face="Consolas"><font color="#dcdcdc">{<br>&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">public</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#4ec9b0">TaskLikeAwaiter</font></span><font color="#dcdcdc"> GetAwaiter() </font><span style="color: "><font color="#b4b4b4">=&gt;</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">default</font></span><font color="#dcdcdc">(</font><span style="color: "><font color="#4ec9b0">TaskLikeAwaiter</font></span></font><font face="Consolas"><font color="#dcdcdc">);<br>}<br> </font><br><span style="color: "><font color="#569cd6">public</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">struct</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#4ec9b0">TaskLikeAwaiter</font></span><font color="#dcdcdc"> : </font><span style="color: "><font color="#b8d7a3">INotifyCompletion</font></span><br></font><font face="Consolas"><font color="#dcdcdc">{<br>&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">public</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">void</font></span></font><font face="Consolas"><font color="#dcdcdc"> GetResult() { }<br> <br>&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">public</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">bool</font></span><font color="#dcdcdc"> IsCompleted </font><span style="color: "><font color="#b4b4b4">=&gt;</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">true</font></span></font></font><font face="Consolas"><font style="font-size: 11pt"><font color="#dcdcdc">;<br> <br>&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">public</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">void</font></span><font color="#dcdcdc"> OnCompleted(</font><span style="color: "><font color="#4ec9b0">Action</font></span><font color="#dcdcdc"> continuation) { }<br>}</font></font></font></pre>
<p>And now we can define a method that returns <code>TaskLike</code> type and even use different task-like types in the method body:<pre style="font-family: ; background: #1e1e1e; color: "><font face="Consolas"><span style="color: "><font color="#569cd6"><font style="font-size: 11pt">public</font></font></span><font style="font-size: 11pt"><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">async</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#4ec9b0">TaskLike</font></span></font></font><font style="font-size: 11pt"><font face="Consolas"><font color="#dcdcdc"> FooAsync()<br>{<br>&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">await</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#4ec9b0">Task</font></span><span style="color: "><font color="#b4b4b4">.</font></span></font></font><font face="Consolas"><font style="font-size: 11pt"><font color="#dcdcdc">Yield();<br>&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">await</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">default</font></span><font color="#dcdcdc">(</font><span style="color: "><font color="#4ec9b0">TaskLike</font></span><font color="#dcdcdc">);<br>}</font></font></font></pre>
<p>The main reason for having task-like types is an ability to reduce the overhead of async operations. Every async operation that returns <code>Task&lt;T&gt;</code>allocates at least one object in the managed heap - the task itself. This is perfectly fine for a vast majority of applications especially when they deal with coarse-grained async operations. But this is not the case for infrastructure-level code that could span thousands of small tasks per second. For such kind of scenarios reducing one allocation per call could reasonably increase performance.
<h4>Async pattern extensibility 101</h4>
<ul>
<li>The C# compiler provides various ways for extending async methods. 
<li>You can change the behavior for existing Task-based async methods by providing your own version of <code>AsyncTaskMethodBuilder</code> type. 
<li>You can make a type "awaitable" by implementing "awaitable pattern". 
<li>Starting from C# 7 you can build your own task-like types.</li></ul>
<h4>Additional references</h4>
<ul>
<li><a href="https://blogs.msdn.microsoft.com/seteplia/2017/11/30/dissecting-the-async-methods-in-c/">Dissecting the async methods in C#</a>
<li><a href="https://github.com/SergeyTeplyakov/EduAsync/">EduAsync repo</a> on github. 
<li><a href="https://github.com/dotnet/roslyn/blob/master/docs/features/task-types.md">Task-like types</a></li></ul>
<p>Next time we'll discuss the perf characteristics of async methods and will see how the newest task-like value type called <code>System.ValueTask</code> affects performance.</p>