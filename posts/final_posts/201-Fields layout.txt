<p>In the recent blog posts we've discussed invisible part of the object layout in the CLR: 
<ul>
<li><a href="https://blogs.msdn.microsoft.com/seteplia/2017/05/26/managed-object-internals-part-1-layout/">Managed object internals, Part 1. The Layout</a> 
<li><a href="https://blogs.msdn.microsoft.com/seteplia/2017/09/06/managed-object-internals-part-2-object-header-layout-and-the-cost-of-locking/">Managed object internals, Part 2. Object header layout and the cost of locking</a> 
<li><a href="https://blogs.msdn.microsoft.com/seteplia/2017/09/12/managed-object-internals-part-3-the-layout-of-a-managed-array-3/">Managed object internals, Part 3. The layout of a managed array</a></li></ul>
<p>This time we're going to focus on the layout of an instance itself, specifically, how instance fields are laid out in memory. 
<p><a href="$FieldsLayout_Figure14.gif"><img title="FieldsLayout_Figure1" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="FieldsLayout_Figure1" src="$FieldsLayout_Figure1_thumb2.gif" width="1280" height="720"></a> 
<p>There is no official documentation about fields layout because the CLR authors reserved the right to change it in the future. But knowledge about the layout can be helpful if you're curious or if you're working on a performance critical application. 
<p>How can we inspect the layout? We can look at a raw memory in Visual Studio or use !dumpobj command in <a href="https://docs.microsoft.com/en-us/dotnet/framework/tools/sos-dll-sos-debugging-extension">SOS Debugging Extension</a>. These approaches are tedious and boring, so we'll try to write a tool that will print an object layout at runtime. 
<p>If you're not interested in the implementation details of the tool, feel free to jump to the section 'Inspecting a value type layout at runtime'.  
<h4>Getting the field offset at runtime</h4>
<p>We're not going to use unmanaged code or Profiling API, instead we'll use the power of <a href="https://msdn.microsoft.com/en-us/library/system.reflection.emit.opcodes.ldflda(v=vs.110).aspx">LdFlda</a> instruction. This IL instruction returns an address of a field for a given type. Unfortunately, this instruction is not exposed in C# language, so we have to do some light-weight code generation to work around that limitation. 
<p>In <a href="https://blogs.msdn.microsoft.com/seteplia/2017/02/01/dissecting-the-new-constraint-in-c-a-perfect-example-of-a-leaky-abstraction/">Dissecting the new() constraint in C#</a> we already did something similar. We'll generate a <a href="https://docs.microsoft.com/en-us/dotnet/framework/reflection-and-codedom/how-to-define-and-execute-dynamic-methods">Dynamic Method</a> with the necessary IL-instructions. 
<p>The method should do the following: 
<ul>
<li>Create an array for all field addresses. 
<li>Enumerate over each <code>FieldInfo</code> of an object to get the offset by calling <code>LdFlda</code> instruction. 
<li>Convert the result of <code>LdFlda</code> instruction to <code>long</code> and store the result in the array. 
<li>Return the array.</li></ul><pre style="font-family: ; background: #1e1e1e; color: "><font face="Consolas"><span style="color: "><font color="#569cd6"><font style="font-size: 10pt">private</font></font></span><font style="font-size: 10pt"><font color="#dadada">&nbsp;</font><span style="color: "><font color="#569cd6">static</font></span><font color="#dadada">&nbsp;</font><span style="color: "><font color="#4ec9b0">Func</font></span><span style="color: "><font color="#dcdcdc">&lt;</font></span><span style="color: "><font color="#569cd6">object</font></span><span style="color: "><font color="#dcdcdc">,</font></span><font color="#dadada">&nbsp;</font><span style="color: "><font color="#569cd6">long</font></span><span style="color: "><font color="#dcdcdc">[]&gt;</font></span><font color="#dadada">&nbsp;</font><font color="#dcdcdc"><span style="color: ">GenerateFieldOffsetInspectionFunction</span><span style="color: ">(</span></font><span style="color: "><font color="#4ec9b0">FieldInfo</font></span><span style="color: "><font color="#dcdcdc">[]</font></span><font color="#dadada">&nbsp;</font></font></font><font style="font-size: 10pt"><font face="Consolas"><font color="#dcdcdc"><span style="color: ">fields</span><span style="color: ">)</span><br><span style="color: ">{</span></font><br><font color="#dadada">&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">var</font></span><font color="#dadada">&nbsp;</font><span style="color: "><font color="#dcdcdc">method</font></span><font color="#dadada">&nbsp;</font><span style="color: "><font color="#b4b4b4">=</font></span><font color="#dadada">&nbsp;</font><span style="color: "><font color="#569cd6">new</font></span><font color="#dadada">&nbsp;</font><span style="color: "><font color="#4ec9b0">DynamicMethod</font></span><span style="color: "><font color="#dcdcdc">(</font></span><br><font color="#dadada">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font><font color="#dcdcdc"><span style="color: ">name</span><span style="color: ">:</span></font><font color="#dadada">&nbsp;</font><span style="color: "><font color="#d69d85">"GetFieldOffsets"</font></span><span style="color: "><font color="#dcdcdc">,</font></span><br><font color="#dadada">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font><font color="#dcdcdc"><span style="color: ">returnType</span><span style="color: ">:</span></font><font color="#dadada">&nbsp;</font><span style="color: "><font color="#569cd6">typeof</font></span><span style="color: "><font color="#dcdcdc">(</font></span><span style="color: "><font color="#569cd6">long</font></span><span style="color: "><font color="#dcdcdc">[]),</font></span><br><font color="#dadada">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font><font color="#dcdcdc"><span style="color: ">parameterTypes</span><span style="color: ">:</span></font><font color="#dadada">&nbsp;</font><span style="color: "><font color="#569cd6">new</font></span><span style="color: "><font color="#dcdcdc">[]</font></span><font color="#dadada">&nbsp;</font><span style="color: "><font color="#dcdcdc">{</font></span><font color="#dadada">&nbsp;</font><span style="color: "><font color="#569cd6">typeof</font></span><span style="color: "><font color="#dcdcdc">(</font></span><span style="color: "><font color="#569cd6">object</font></span><span style="color: "><font color="#dcdcdc">)</font></span><font color="#dadada">&nbsp;</font><span style="color: "><font color="#dcdcdc">},</font></span><br><font color="#dadada">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font><font color="#dcdcdc"><span style="color: ">m</span><span style="color: ">:</span></font><font color="#dadada">&nbsp;</font><span style="color: "><font color="#569cd6">typeof</font></span><span style="color: "><font color="#dcdcdc">(</font></span><span style="color: "><font color="#4ec9b0">InspectorHelper</font></span><span style="color: "><font color="#dcdcdc">)</font></span><span style="color: "><font color="#b4b4b4">.</font></span><font color="#dcdcdc"><span style="color: ">Module</span><span style="color: ">,</span></font><br><font color="#dadada">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font><font color="#dcdcdc"><span style="color: ">skipVisibility</span><span style="color: ">:</span></font><font color="#dadada">&nbsp;</font><span style="color: "><font color="#569cd6">true</font></span><span style="color: "><font color="#dcdcdc">);</font></span><br></font><font face="Consolas"><font color="#dadada"> <br>&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#4ec9b0">ILGenerator</font></span><font color="#dadada">&nbsp;</font><span style="color: "><font color="#dcdcdc">ilGen</font></span><font color="#dadada">&nbsp;</font><span style="color: "><font color="#b4b4b4">=</font></span><font color="#dadada">&nbsp;</font><span style="color: "><font color="#dcdcdc">method</font></span><span style="color: "><font color="#b4b4b4">.</font></span><font color="#dcdcdc"><span style="color: ">GetILGenerator</span><span style="color: ">();</span></font><br></font><font face="Consolas"><font color="#dadada"> <br>&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#57a64a">// Declaring local variable of type long[]</font></span><br><font color="#dadada">&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#dcdcdc">ilGen</font></span><span style="color: "><font color="#b4b4b4">.</font></span><font color="#dcdcdc"><span style="color: ">DeclareLocal</span><span style="color: ">(</span></font><span style="color: "><font color="#569cd6">typeof</font></span><span style="color: "><font color="#dcdcdc">(</font></span><span style="color: "><font color="#569cd6">long</font></span><span style="color: "><font color="#dcdcdc">[]));</font></span><br><font color="#dadada">&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#57a64a">// Loading array size onto evaluation stack</font></span><br><font color="#dadada">&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#dcdcdc">ilGen</font></span><span style="color: "><font color="#b4b4b4">.</font></span><font color="#dcdcdc"><span style="color: ">Emit</span><span style="color: ">(</span></font><span style="color: "><font color="#4ec9b0">OpCodes</font></span><span style="color: "><font color="#b4b4b4">.</font></span><font color="#dcdcdc"><span style="color: ">Ldc_I4</span><span style="color: ">,</span></font><font color="#dadada">&nbsp;</font><span style="color: "><font color="#dcdcdc">fields</font></span><span style="color: "><font color="#b4b4b4">.</font></span><font color="#dcdcdc"><span style="color: ">Length</span><span style="color: ">);</span></font><br></font><font face="Consolas"><font color="#dadada"> <br>&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#57a64a">// Creating an array and storing it into the local</font></span><br><font color="#dadada">&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#dcdcdc">ilGen</font></span><span style="color: "><font color="#b4b4b4">.</font></span><font color="#dcdcdc"><span style="color: ">Emit</span><span style="color: ">(</span></font><span style="color: "><font color="#4ec9b0">OpCodes</font></span><span style="color: "><font color="#b4b4b4">.</font></span><font color="#dcdcdc"><span style="color: ">Newarr</span><span style="color: ">,</span></font><font color="#dadada">&nbsp;</font><span style="color: "><font color="#569cd6">typeof</font></span><span style="color: "><font color="#dcdcdc">(</font></span><span style="color: "><font color="#569cd6">long</font></span><span style="color: "><font color="#dcdcdc">));</font></span><br><font color="#dadada">&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#dcdcdc">ilGen</font></span><span style="color: "><font color="#b4b4b4">.</font></span><font color="#dcdcdc"><span style="color: ">Emit</span><span style="color: ">(</span></font><span style="color: "><font color="#4ec9b0">OpCodes</font></span><span style="color: "><font color="#b4b4b4">.</font></span><font color="#dcdcdc"><span style="color: ">Stloc_0</span><span style="color: ">);</span></font><br></font><font face="Consolas"><font color="#dadada"> <br>&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">for</font></span><font color="#dadada">&nbsp;</font><span style="color: "><font color="#dcdcdc">(</font></span><span style="color: "><font color="#569cd6">int</font></span><font color="#dadada">&nbsp;</font><span style="color: "><font color="#dcdcdc">i</font></span><font color="#dadada">&nbsp;</font><span style="color: "><font color="#b4b4b4">=</font></span><font color="#dadada">&nbsp;</font><span style="color: "><font color="#b5cea8">0</font></span><span style="color: "><font color="#dcdcdc">;</font></span><font color="#dadada">&nbsp;</font><span style="color: "><font color="#dcdcdc">i</font></span><font color="#dadada">&nbsp;</font><span style="color: "><font color="#b4b4b4">&lt;</font></span><font color="#dadada">&nbsp;</font><span style="color: "><font color="#dcdcdc">fields</font></span><span style="color: "><font color="#b4b4b4">.</font></span><font color="#dcdcdc"><span style="color: ">Length</span><span style="color: ">;</span></font><font color="#dadada">&nbsp;</font><span style="color: "><font color="#dcdcdc">i</font></span><span style="color: "><font color="#b4b4b4">++</font></span><span style="color: "><font color="#dcdcdc">)</font></span><br><font color="#dadada">&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#dcdcdc">{</font></span><br><font color="#dadada">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#57a64a">// Loading the local with an array</font></span><br><font color="#dadada">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#dcdcdc">ilGen</font></span><span style="color: "><font color="#b4b4b4">.</font></span><font color="#dcdcdc"><span style="color: ">Emit</span><span style="color: ">(</span></font><span style="color: "><font color="#4ec9b0">OpCodes</font></span><span style="color: "><font color="#b4b4b4">.</font></span><font color="#dcdcdc"><span style="color: ">Ldloc_0</span><span style="color: ">);</span></font><br></font><font face="Consolas"><font color="#dadada"> <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#57a64a">// Loading an index of the array where we're going to store the element</font></span><br><font color="#dadada">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#dcdcdc">ilGen</font></span><span style="color: "><font color="#b4b4b4">.</font></span><font color="#dcdcdc"><span style="color: ">Emit</span><span style="color: ">(</span></font><span style="color: "><font color="#4ec9b0">OpCodes</font></span><span style="color: "><font color="#b4b4b4">.</font></span><font color="#dcdcdc"><span style="color: ">Ldc_I4</span><span style="color: ">,</span></font><font color="#dadada">&nbsp;</font><font color="#dcdcdc"><span style="color: ">i</span><span style="color: ">);</span></font><br></font><font face="Consolas"><font color="#dadada"> <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#57a64a">// Loading object instance onto evaluation stack</font></span><br><font color="#dadada">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#dcdcdc">ilGen</font></span><span style="color: "><font color="#b4b4b4">.</font></span><font color="#dcdcdc"><span style="color: ">Emit</span><span style="color: ">(</span></font><span style="color: "><font color="#4ec9b0">OpCodes</font></span><span style="color: "><font color="#b4b4b4">.</font></span><font color="#dcdcdc"><span style="color: ">Ldarg_0</span><span style="color: ">);</span></font><br></font><font face="Consolas"><font color="#dadada"> <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#57a64a">// Getting the address for a given field</font></span><br><font color="#dadada">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#dcdcdc">ilGen</font></span><span style="color: "><font color="#b4b4b4">.</font></span><font color="#dcdcdc"><span style="color: ">Emit</span><span style="color: ">(</span></font><span style="color: "><font color="#4ec9b0">OpCodes</font></span><span style="color: "><font color="#b4b4b4">.</font></span><font color="#dcdcdc"><span style="color: ">Ldflda</span><span style="color: ">,</span></font><font color="#dadada">&nbsp;</font><font color="#dcdcdc"><span style="color: ">fields</span><span style="color: ">[</span><span style="color: ">i</span><span style="color: ">]);</span></font><br></font><font face="Consolas"><font color="#dadada"> <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#57a64a">// Converting field offset to long</font></span><br><font color="#dadada">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#dcdcdc">ilGen</font></span><span style="color: "><font color="#b4b4b4">.</font></span><font color="#dcdcdc"><span style="color: ">Emit</span><span style="color: ">(</span></font><span style="color: "><font color="#4ec9b0">OpCodes</font></span><span style="color: "><font color="#b4b4b4">.</font></span><font color="#dcdcdc"><span style="color: ">Conv_I8</span><span style="color: ">);</span></font><br></font><font face="Consolas"><font color="#dadada"> <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#57a64a">// Storing the offset in the array</font></span><br><font color="#dadada">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#dcdcdc">ilGen</font></span><span style="color: "><font color="#b4b4b4">.</font></span><font color="#dcdcdc"><span style="color: ">Emit</span><span style="color: ">(</span></font><span style="color: "><font color="#4ec9b0">OpCodes</font></span><span style="color: "><font color="#b4b4b4">.</font></span><font color="#dcdcdc"><span style="color: ">Stelem_I8</span><span style="color: ">);</span></font><br><font color="#dadada">&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#dcdcdc">}</font></span><br></font><font face="Consolas"><font color="#dadada"> <br>&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#dcdcdc">ilGen</font></span><span style="color: "><font color="#b4b4b4">.</font></span><font color="#dcdcdc"><span style="color: ">Emit</span><span style="color: ">(</span></font><span style="color: "><font color="#4ec9b0">OpCodes</font></span><span style="color: "><font color="#b4b4b4">.</font></span><font color="#dcdcdc"><span style="color: ">Ldloc_0</span><span style="color: ">);</span></font><br><font color="#dadada">&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#dcdcdc">ilGen</font></span><span style="color: "><font color="#b4b4b4">.</font></span><font color="#dcdcdc"><span style="color: ">Emit</span><span style="color: ">(</span></font><span style="color: "><font color="#4ec9b0">OpCodes</font></span><span style="color: "><font color="#b4b4b4">.</font></span><font color="#dcdcdc"><span style="color: ">Ret</span><span style="color: ">);</span></font><br></font></font><font face="Consolas"><font style="font-size: 10pt"><font color="#dadada"> <br>&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">return</font></span><font color="#dadada">&nbsp;</font><span style="color: "><font color="#dcdcdc">(</font></span><span style="color: "><font color="#4ec9b0">Func</font></span><span style="color: "><font color="#dcdcdc">&lt;</font></span><span style="color: "><font color="#569cd6">object</font></span><span style="color: "><font color="#dcdcdc">,</font></span><font color="#dadada">&nbsp;</font><span style="color: "><font color="#569cd6">long</font></span><font color="#dcdcdc"><span style="color: ">[]&gt;)</span><span style="color: ">method</span></font><span style="color: "><font color="#b4b4b4">.</font></span><font color="#dcdcdc"><span style="color: ">CreateDelegate</span><span style="color: ">(</span></font><span style="color: "><font color="#569cd6">typeof</font></span><span style="color: "><font color="#dcdcdc">(</font></span><span style="color: "><font color="#4ec9b0">Func</font></span><span style="color: "><font color="#dcdcdc">&lt;</font></span><span style="color: "><font color="#569cd6">object</font></span><span style="color: "><font color="#dcdcdc">,</font></span><font color="#dadada">&nbsp;</font><span style="color: "><font color="#569cd6">long</font></span><font color="#dcdcdc"><span style="color: ">[]&gt;));</span><br></font></font><span style="color: "><font style="font-size: 10pt" color="#dcdcdc">}</font></span></font></pre>
<p>Now we can create a helper function that will provide the offsets for each field for a given type:</p><pre style="font-family: ; background: #1e1e1e; color: "><font face="Consolas"><span style="color: "><font color="#569cd6"><font style="font-size: 10pt">public</font></font></span><font style="font-size: 10pt"><font color="#dadada">&nbsp;</font><span style="color: "><font color="#569cd6">static</font></span><font color="#dadada">&nbsp;</font><span style="color: "><font color="#dcdcdc">(</font></span><span style="color: "><font color="#4ec9b0">FieldInfo</font></span><font color="#dadada">&nbsp;</font><font color="#dcdcdc"><span style="color: ">fieldInfo</span><span style="color: ">,</span></font><font color="#dadada">&nbsp;</font><span style="color: "><font color="#569cd6">int</font></span><font color="#dadada">&nbsp;</font><font color="#dcdcdc"><span style="color: ">offset</span><span style="color: ">)[]</span></font><font color="#dadada">&nbsp;</font><font color="#dcdcdc"><span style="color: ">GetFieldOffsets</span><span style="color: ">(</span></font><span style="color: "><font color="#4ec9b0">Type</font></span><font color="#dadada">&nbsp;</font></font></font><font style="font-size: 10pt"><font face="Consolas"><font color="#dcdcdc"><span style="color: ">t</span><span style="color: ">)</span><br><span style="color: ">{</span></font><br><font color="#dadada">&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">var</font></span><font color="#dadada">&nbsp;</font><span style="color: "><font color="#dcdcdc">fields</font></span><font color="#dadada">&nbsp;</font><span style="color: "><font color="#b4b4b4">=</font></span><font color="#dadada">&nbsp;</font><span style="color: "><font color="#dcdcdc">t</font></span><span style="color: "><font color="#b4b4b4">.</font></span><font color="#dcdcdc"><span style="color: ">GetFields</span><span style="color: ">(</span></font><span style="color: "><font color="#b8d7a3">BindingFlags</font></span><span style="color: "><font color="#b4b4b4">.</font></span><span style="color: "><font color="#dcdcdc">Public</font></span><font color="#dadada">&nbsp;</font><span style="color: "><font color="#b4b4b4">|</font></span><font color="#dadada">&nbsp;</font><span style="color: "><font color="#b8d7a3">BindingFlags</font></span><span style="color: "><font color="#b4b4b4">.</font></span><span style="color: "><font color="#dcdcdc">Instance</font></span><font color="#dadada">&nbsp;</font><span style="color: "><font color="#b4b4b4">|</font></span><font color="#dadada">&nbsp;</font><span style="color: "><font color="#b8d7a3">BindingFlags</font></span><span style="color: "><font color="#b4b4b4">.</font></span><font color="#dcdcdc"><span style="color: ">NonPublic</span><span style="color: ">);</span></font><br></font><font face="Consolas"><font color="#dadada"> <br>&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#4ec9b0">Func</font></span><span style="color: "><font color="#dcdcdc">&lt;</font></span><span style="color: "><font color="#569cd6">object</font></span><span style="color: "><font color="#dcdcdc">,</font></span><font color="#dadada">&nbsp;</font><span style="color: "><font color="#569cd6">long</font></span><span style="color: "><font color="#dcdcdc">[]&gt;</font></span><font color="#dadada">&nbsp;</font><span style="color: "><font color="#dcdcdc">fieldOffsetInspector</font></span><font color="#dadada">&nbsp;</font><span style="color: "><font color="#b4b4b4">=</font></span><font color="#dadada">&nbsp;</font><font color="#dcdcdc"><span style="color: ">GenerateFieldOffsetInspectionFunction</span><span style="color: ">(</span><span style="color: ">fields</span><span style="color: ">);</span></font><br></font><font face="Consolas"><font color="#dadada"> <br>&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">var</font></span><font color="#dadada">&nbsp;</font><span style="color: "><font color="#dcdcdc">instance</font></span><font color="#dadada">&nbsp;</font><span style="color: "><font color="#b4b4b4">=</font></span><font color="#dadada">&nbsp;</font><font color="#dcdcdc"><span style="color: ">CreateInstance</span><span style="color: ">(</span><span style="color: ">t</span><span style="color: ">);</span></font><br><font color="#dadada">&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">var</font></span><font color="#dadada">&nbsp;</font><span style="color: "><font color="#dcdcdc">addresses</font></span><font color="#dadada">&nbsp;</font><span style="color: "><font color="#b4b4b4">=</font></span><font color="#dadada">&nbsp;</font><font color="#dcdcdc"><span style="color: ">fieldOffsetInspector</span><span style="color: ">(</span><span style="color: ">instance</span><span style="color: ">);</span></font><br></font><font face="Consolas"><font color="#dadada"> <br>&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">if</font></span><font color="#dadada">&nbsp;</font><font color="#dcdcdc"><span style="color: ">(</span><span style="color: ">addresses</span></font><span style="color: "><font color="#b4b4b4">.</font></span><span style="color: "><font color="#dcdcdc">Length</font></span><font color="#dadada">&nbsp;</font><span style="color: "><font color="#b4b4b4">==</font></span><font color="#dadada">&nbsp;</font><span style="color: "><font color="#b5cea8">0</font></span><span style="color: "><font color="#dcdcdc">)</font></span><br><font color="#dadada">&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#dcdcdc">{</font></span><br><font color="#dadada">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">return</font></span><font color="#dadada">&nbsp;</font><span style="color: "><font color="#4ec9b0">Array</font></span><span style="color: "><font color="#b4b4b4">.</font></span><font color="#dcdcdc"><span style="color: ">Empty</span><span style="color: ">&lt;(</span></font><span style="color: "><font color="#4ec9b0">FieldInfo</font></span><span style="color: "><font color="#dcdcdc">,</font></span><font color="#dadada">&nbsp;</font><span style="color: "><font color="#569cd6">int</font></span><span style="color: "><font color="#dcdcdc">)&gt;();</font></span><br><font color="#dadada">&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#dcdcdc">}</font></span><br></font><font face="Consolas"><font color="#dadada"> <br>&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">var</font></span><font color="#dadada">&nbsp;</font><span style="color: "><font color="#dcdcdc">baseLine</font></span><font color="#dadada">&nbsp;</font><span style="color: "><font color="#b4b4b4">=</font></span><font color="#dadada">&nbsp;</font><span style="color: "><font color="#dcdcdc">addresses</font></span><span style="color: "><font color="#b4b4b4">.</font></span><font color="#dcdcdc"><span style="color: ">Min</span><span style="color: ">();</span></font><br></font></font><font face="Consolas"><font style="font-size: 10pt"><font color="#dadada">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br>&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#57a64a">// Converting field addresses to offsets using the first field as a baseline</font></span><br><font color="#dadada">&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">return</font></span><font color="#dadada">&nbsp;</font><span style="color: "><font color="#dcdcdc">fields</font></span><br><font color="#dadada">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#b4b4b4">.</font></span><font color="#dcdcdc"><span style="color: ">Select</span><span style="color: ">((</span><span style="color: ">field</span><span style="color: ">,</span></font><font color="#dadada">&nbsp;</font><font color="#dcdcdc"><span style="color: ">index</span><span style="color: ">)</span></font><font color="#dadada">&nbsp;</font><span style="color: "><font color="#b4b4b4">=&gt;</font></span><font color="#dadada">&nbsp;</font><font color="#dcdcdc"><span style="color: ">(</span><span style="color: ">field</span><span style="color: ">:</span></font><font color="#dadada">&nbsp;</font><font color="#dcdcdc"><span style="color: ">field</span><span style="color: ">,</span></font><font color="#dadada">&nbsp;</font><font color="#dcdcdc"><span style="color: ">offset</span><span style="color: ">:</span></font><font color="#dadada">&nbsp;</font><span style="color: "><font color="#dcdcdc">(</font></span><span style="color: "><font color="#569cd6">int</font></span><font color="#dcdcdc"><span style="color: ">)(</span><span style="color: ">addresses</span><span style="color: ">[</span><span style="color: ">index</span><span style="color: ">]</span></font><font color="#dadada">&nbsp;</font><span style="color: "><font color="#b4b4b4">-</font></span><font color="#dadada">&nbsp;</font><font color="#dcdcdc"><span style="color: ">baseLine</span><span style="color: ">)))</span></font><br><font color="#dadada">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#b4b4b4">.</font></span><font color="#dcdcdc"><span style="color: ">OrderBy</span><span style="color: ">(</span><span style="color: ">tuple</span></font><font color="#dadada">&nbsp;</font><span style="color: "><font color="#b4b4b4">=&gt;</font></span><font color="#dadada">&nbsp;</font><span style="color: "><font color="#dcdcdc">tuple</font></span><span style="color: "><font color="#b4b4b4">.</font></span><font color="#dcdcdc"><span style="color: ">offset</span><span style="color: ">)</span></font><br><font color="#dadada">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#b4b4b4">.</font></span><font color="#dcdcdc"><span style="color: ">ToArray</span><span style="color: ">();</span><br></font></font><span style="color: "><font style="font-size: 10pt" color="#dcdcdc">}</font></span></font></pre>
<p>The function is pretty straightforward with one caveat: <code>LdFlda</code> instruction expects an object instance on the evaluation stack. For value types and for reference types with a default constructor, the solution is trivial: use <code>Activator.CreateInstance(Type)</code>. But what if want to inspect classes that doesn't have a default constructor? 
<p>In this case we can use a lesser known "generic factory" called <a href="https://msdn.microsoft.com/en-us/library/system.runtime.serialization.formatterservices.getuninitializedobject(v=vs.110).aspx"><code>FormatterServices.GetUninitializedObject(Type)</code></a>:<pre style="font-family: ; background: #1e1e1e; color: "><font face="Consolas"><span style="color: "><font color="#569cd6"><font style="font-size: 10pt">private</font></font></span><font style="font-size: 10pt"><font color="#dadada">&nbsp;</font><span style="color: "><font color="#569cd6">static</font></span><font color="#dadada">&nbsp;</font><span style="color: "><font color="#569cd6">object</font></span><font color="#dadada">&nbsp;</font><font color="#dcdcdc"><span style="color: ">CreateInstance</span><span style="color: ">(</span></font><span style="color: "><font color="#4ec9b0">Type</font></span><font color="#dadada">&nbsp;</font></font></font><font face="Consolas"><font style="font-size: 10pt"><font color="#dcdcdc"><span style="color: ">t</span><span style="color: ">)</span><br><span style="color: ">{</span></font><br><font color="#dadada">&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">return</font></span><font color="#dadada">&nbsp;</font><span style="color: "><font color="#dcdcdc">t</font></span><span style="color: "><font color="#b4b4b4">.</font></span><span style="color: "><font color="#dcdcdc">IsValueType</font></span><font color="#dadada">&nbsp;</font><span style="color: "><font color="#b4b4b4">?</font></span><font color="#dadada">&nbsp;</font><span style="color: "><font color="#4ec9b0">Activator</font></span><span style="color: "><font color="#b4b4b4">.</font></span><font color="#dcdcdc"><span style="color: ">CreateInstance</span><span style="color: ">(</span><span style="color: ">t</span><span style="color: ">)</span></font><font color="#dadada">&nbsp;</font><span style="color: "><font color="#b4b4b4">:</font></span><font color="#dadada">&nbsp;</font><span style="color: "><font color="#4ec9b0">FormatterServices</font></span><span style="color: "><font color="#b4b4b4">.</font></span><font color="#dcdcdc"><span style="color: ">GetUninitializedObject</span><span style="color: ">(</span><span style="color: ">t</span><span style="color: ">);</span><br></font></font><span style="color: "><font style="font-size: 10pt" color="#dcdcdc">}</font></span></font></pre>
<p>Let's test <code>GetFieldOffsets</code> to get the layout for the following type:<pre style="font-family: ; background: #1e1e1e; color: "><font face="Consolas"><span style="color: "><font color="#569cd6"><font style="font-size: 10pt">class</font></font></span><font style="font-size: 10pt"><font color="#dadada">&nbsp;</font><span style="color: "><font color="#4ec9b0">ByteAndInt</font></span><br><span style="color: "><font color="#dcdcdc">{</font></span><br><font color="#dadada">&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">public</font></span><font color="#dadada">&nbsp;</font><span style="color: "><font color="#569cd6">byte</font></span><font color="#dadada">&nbsp;</font><span style="color: "><font color="#dcdcdc">b</font></span><font color="#dadada">&nbsp;</font><span style="color: "><font color="#dcdcdc">{</font></span><font color="#dadada">&nbsp;</font><span style="color: "><font color="#569cd6">get</font></span><span style="color: "><font color="#dcdcdc">;</font></span><font color="#dadada">&nbsp;</font><span style="color: "><font color="#dcdcdc">}</font></span><br><font color="#dadada">&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">public</font></span><font color="#dadada">&nbsp;</font><span style="color: "><font color="#569cd6">int</font></span><font color="#dadada">&nbsp;</font></font></font><font style="font-size: 10pt"><font face="Consolas"><font color="#dcdcdc"><span style="color: ">n</span><span style="color: ">;</span><br><span style="color: ">}</span></font><br></font></font><font face="Consolas"><font style="font-size: 10pt"><font color="#dadada"> <br>&nbsp;</font><span style="color: "><font color="#4ec9b0">Console</font></span><span style="color: "><font color="#b4b4b4">.</font></span><font color="#dcdcdc"><span style="color: ">WriteLine</span><span style="color: ">(</span></font><br><font color="#dadada">&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">string</font></span><span style="color: "><font color="#b4b4b4">.</font></span><font color="#dcdcdc"><span style="color: ">Join</span><span style="color: ">(</span></font><span style="color: "><font color="#d69d85">"</font></span><span style="color: "><font color="#e07a00">\r</font></span><span style="color: "><font color="#ff8d1c">\n</font></span><span style="color: "><font color="#d69d85">"</font></span><span style="color: "><font color="#dcdcdc">,</font></span><br><font color="#dadada">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#4ec9b0">InspectorHelper</font></span><span style="color: "><font color="#b4b4b4">.</font></span><font color="#dcdcdc"><span style="color: ">GetFieldOffsets</span><span style="color: ">(</span></font><span style="color: "><font color="#569cd6">typeof</font></span><span style="color: "><font color="#dcdcdc">(</font></span><span style="color: "><font color="#4ec9b0">ByteAndInt</font></span><span style="color: "><font color="#dcdcdc">))</font></span><br><font color="#dadada">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#b4b4b4">.</font></span><font color="#dcdcdc"><span style="color: ">Select</span><span style="color: ">(</span><span style="color: ">tpl</span></font><font color="#dadada">&nbsp;</font><span style="color: "><font color="#b4b4b4">=&gt;</font></span><font color="#dadada">&nbsp;</font><span style="color: "><font color="#d69d85">$"Field </font></span><font color="#dcdcdc"><span style="color: ">{</span><span style="color: ">tpl</span></font><span style="color: "><font color="#b4b4b4">.</font></span><span style="color: "><font color="#dcdcdc">fieldInfo</font></span><span style="color: "><font color="#b4b4b4">.</font></span><font color="#dcdcdc"><span style="color: ">Name</span><span style="color: ">}</span></font><span style="color: "><font color="#d69d85">: starts at offset </font></span><font color="#dcdcdc"><span style="color: ">{</span><span style="color: ">tpl</span></font><span style="color: "><font color="#b4b4b4">.</font></span><font color="#dcdcdc"><span style="color: ">offset</span><span style="color: ">}</span></font><span style="color: "><font color="#d69d85">"</font></span><span style="color: "><font color="#dcdcdc">))</font></span><br><font color="#dadada">&nbsp;&nbsp;&nbsp; </font></font><span style="color: "><font style="font-size: 10pt" color="#dcdcdc">);</font></span></font><br></pre>
<p>&nbsp; <p>The output is:<pre><code><p>Field n: starts at offset 0
Field b: starts at offset 4
</p></code></pre>
<p>Interesting, but not sufficient. We can inspect offsets for each field, but it would be very helpful to know the size of each field to understand how efficient the layout is and how much empty space each instance has. 
<h4>Computing the size for a type instance</h4>
<p>And again, there is no "official" way to get the size of the object instance. <a href="https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/sizeof"><code>sizeof</code></a> operator works only for primitive types and user-defined structs with no fields of reference types. <a href="https://docs.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.marshal.sizeof?view=netframework-4.7"><code>Marshal.SizeOf</code></a> returns a size of an object in unmanaged memory and is also not suitable for our needs. 
<p>We'll compute instance size for value types and object separately. To compute the size of a struct we'll rely on the CLR itself. We will create a simple generic type with two fields: the first field of the desired type and the second field that will be used to get the size of the first one.<pre style="font-family: ; background: #1e1e1e; color: "><font face="Consolas"><font style="font-size: 10"><span style="color: "><font color="#569cd6">struct</font></span><font color="#dadada">&nbsp;</font><span style="color: "><font color="#4ec9b0">SizeComputer</font></span><span style="color: "><font color="#dcdcdc">&lt;</font></span><span style="color: "><font color="#b8d7a3">T</font></span></font></font><font style="font-size: 10"><font face="Consolas"><font color="#dcdcdc"><span style="color: ">&gt;</span><br><span style="color: ">{</span></font><br><font color="#dadada">&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">public</font></span><font color="#dadada">&nbsp;</font><span style="color: "><font color="#b8d7a3">T</font></span><font color="#dadada">&nbsp;</font><font color="#dcdcdc"><span style="color: ">dummyField</span><span style="color: ">;</span></font><br><font color="#dadada">&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">public</font></span><font color="#dadada">&nbsp;</font><span style="color: "><font color="#569cd6">int</font></span><font color="#dadada">&nbsp;</font><font color="#dcdcdc"><span style="color: ">offset</span><span style="color: ">;</span></font><br><span style="color: "><font color="#dcdcdc">}</font></span><br><font color="#dadada"> </font><br></font><font face="Consolas"><span style="color: "><font color="#569cd6">public</font></span><font color="#dadada">&nbsp;</font><span style="color: "><font color="#569cd6">static</font></span><font color="#dadada">&nbsp;</font><span style="color: "><font color="#569cd6">int</font></span><font color="#dadada">&nbsp;</font><font color="#dcdcdc"><span style="color: ">GetSizeOfValueTypeInstance</span><span style="color: ">(</span></font><span style="color: "><font color="#4ec9b0">Type</font></span><font color="#dadada">&nbsp;</font></font><font face="Consolas"><font color="#dcdcdc"><span style="color: ">type</span><span style="color: ">)</span><br><span style="color: ">{</span></font><br><font color="#dadada">&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#4ec9b0">Debug</font></span><span style="color: "><font color="#b4b4b4">.</font></span><font color="#dcdcdc"><span style="color: ">Assert</span><span style="color: ">(</span><span style="color: ">type</span></font><span style="color: "><font color="#b4b4b4">.</font></span><font color="#dcdcdc"><span style="color: ">IsValueType</span><span style="color: ">);</span></font><br></font></font><font face="Consolas"><font style="font-size: 10"><font color="#dadada"> <br>&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">var</font></span><font color="#dadada">&nbsp;</font><span style="color: "><font color="#dcdcdc">generatedType</font></span><font color="#dadada">&nbsp;</font><span style="color: "><font color="#b4b4b4">=</font></span><font color="#dadada">&nbsp;</font><span style="color: "><font color="#569cd6">typeof</font></span><span style="color: "><font color="#dcdcdc">(</font></span><span style="color: "><font color="#4ec9b0">SizeComputer</font></span><span style="color: "><font color="#dcdcdc">&lt;&gt;)</font></span><span style="color: "><font color="#b4b4b4">.</font></span><font color="#dcdcdc"><span style="color: ">MakeGenericType</span><span style="color: ">(</span><span style="color: ">type</span><span style="color: ">);</span></font><br><font color="#dadada">&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#57a64a">// The offset of the second field is the size of the 'type'</font></span><br><font color="#dadada">&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">var</font></span><font color="#dadada">&nbsp;</font><span style="color: "><font color="#dcdcdc">fieldsOffsets</font></span><font color="#dadada">&nbsp;</font><span style="color: "><font color="#b4b4b4">=</font></span><font color="#dadada">&nbsp;</font><font color="#dcdcdc"><span style="color: ">GetFieldOffsets</span><span style="color: ">(</span><span style="color: ">generatedType</span><span style="color: ">);</span></font><br><font color="#dadada">&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">return</font></span><font color="#dadada">&nbsp;</font><font color="#dcdcdc"><span style="color: ">fieldsOffsets</span><span style="color: ">[</span></font><span style="color: "><font color="#b5cea8">1</font></span><span style="color: "><font color="#dcdcdc">]</font></span><span style="color: "><font color="#b4b4b4">.</font></span><font color="#dcdcdc"><span style="color: ">offset</span><span style="color: ">;</span><br></font></font><span style="color: "><font style="font-size: 10" color="#dcdcdc">}</font></span></font></pre>
<p>To get the size of a reference type instance we will use another trick: we'll get the max field offset, then add the size of that field and round that number to a pointer-size boundary. We already know how to compute the size of a value type and we know that every field of a reference type occupies 4 or 8 bytes depending on the platform. So we've got everything we need:<pre style="font-family: ; background: #1e1e1e; color: "><font face="Consolas"><span style="color: "><font color="#569cd6"><font style="font-size: 10pt">public</font></font></span><font style="font-size: 10pt"><font color="#dadada">&nbsp;</font><span style="color: "><font color="#569cd6">static</font></span><font color="#dadada">&nbsp;</font><span style="color: "><font color="#569cd6">int</font></span><font color="#dadada">&nbsp;</font><font color="#dcdcdc"><span style="color: ">GetSizeOfReferenceTypeInstance</span><span style="color: ">(</span></font><span style="color: "><font color="#4ec9b0">Type</font></span><font color="#dadada">&nbsp;</font></font></font><font style="font-size: 10pt"><font face="Consolas"><font color="#dcdcdc"><span style="color: ">type</span><span style="color: ">)</span><br><span style="color: ">{</span></font><br><font color="#dadada">&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#4ec9b0">Debug</font></span><span style="color: "><font color="#b4b4b4">.</font></span><font color="#dcdcdc"><span style="color: ">Assert</span><span style="color: ">(</span></font><span style="color: "><font color="#b4b4b4">!</font></span><span style="color: "><font color="#dcdcdc">type</font></span><span style="color: "><font color="#b4b4b4">.</font></span><font color="#dcdcdc"><span style="color: ">IsValueType</span><span style="color: ">);</span></font><br></font><font face="Consolas"><font color="#dadada"> <br>&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">var</font></span><font color="#dadada">&nbsp;</font><span style="color: "><font color="#dcdcdc">fields</font></span><font color="#dadada">&nbsp;</font><span style="color: "><font color="#b4b4b4">=</font></span><font color="#dadada">&nbsp;</font><font color="#dcdcdc"><span style="color: ">GetFieldOffsets</span><span style="color: ">(</span><span style="color: ">type</span><span style="color: ">);</span></font><br></font><font face="Consolas"><font color="#dadada"> <br>&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">if</font></span><font color="#dadada">&nbsp;</font><font color="#dcdcdc"><span style="color: ">(</span><span style="color: ">fields</span></font><span style="color: "><font color="#b4b4b4">.</font></span><span style="color: "><font color="#dcdcdc">Length</font></span><font color="#dadada">&nbsp;</font><span style="color: "><font color="#b4b4b4">==</font></span><font color="#dadada">&nbsp;</font><span style="color: "><font color="#b5cea8">0</font></span><span style="color: "><font color="#dcdcdc">)</font></span><br><font color="#dadada">&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#dcdcdc">{</font></span><br><font color="#dadada">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#57a64a">// Special case: the size of an empty class is 1 Ptr size</font></span><br><font color="#dadada">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">return</font></span><font color="#dadada">&nbsp;</font><span style="color: "><font color="#4ec9b0">IntPtr</font></span><span style="color: "><font color="#b4b4b4">.</font></span><font color="#dcdcdc"><span style="color: ">Size</span><span style="color: ">;</span></font><br><font color="#dadada">&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#dcdcdc">}</font></span><br></font><font face="Consolas"><font color="#dadada"> <br>&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#57a64a">// The size of the reference type is computed in the following way:</font></span><br><font color="#dadada">&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#57a64a">// MaxFieldOffset + SizeOfThatField</font></span><br><font color="#dadada">&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#57a64a">// and round that number to closest point size boundary</font></span><br><font color="#dadada">&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">var</font></span><font color="#dadada">&nbsp;</font><span style="color: "><font color="#dcdcdc">maxValue</font></span><font color="#dadada">&nbsp;</font><span style="color: "><font color="#b4b4b4">=</font></span><font color="#dadada">&nbsp;</font><span style="color: "><font color="#dcdcdc">fields</font></span><span style="color: "><font color="#b4b4b4">.</font></span><font color="#dcdcdc"><span style="color: ">MaxBy</span><span style="color: ">(</span><span style="color: ">tpl</span></font><font color="#dadada">&nbsp;</font><span style="color: "><font color="#b4b4b4">=&gt;</font></span><font color="#dadada">&nbsp;</font><span style="color: "><font color="#dcdcdc">tpl</font></span><span style="color: "><font color="#b4b4b4">.</font></span><font color="#dcdcdc"><span style="color: ">offset</span><span style="color: ">);</span></font><br><font color="#dadada">&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">int</font></span><font color="#dadada">&nbsp;</font><span style="color: "><font color="#dcdcdc">sizeCandidate</font></span><font color="#dadada">&nbsp;</font><span style="color: "><font color="#b4b4b4">=</font></span><font color="#dadada">&nbsp;</font><span style="color: "><font color="#dcdcdc">maxValue</font></span><span style="color: "><font color="#b4b4b4">.</font></span><span style="color: "><font color="#dcdcdc">offset</font></span><font color="#dadada">&nbsp;</font><span style="color: "><font color="#b4b4b4">+</font></span><font color="#dadada">&nbsp;</font><font color="#dcdcdc"><span style="color: ">GetFieldSize</span><span style="color: ">(</span><span style="color: ">maxValue</span></font><span style="color: "><font color="#b4b4b4">.</font></span><span style="color: "><font color="#dcdcdc">fieldInfo</font></span><span style="color: "><font color="#b4b4b4">.</font></span><font color="#dcdcdc"><span style="color: ">FieldType</span><span style="color: ">);</span></font><br></font><font face="Consolas"><font color="#dadada"> <br>&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#57a64a">// Rounding the size to the nearest ptr-size boundary</font></span><br><font color="#dadada">&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">int</font></span><font color="#dadada">&nbsp;</font><span style="color: "><font color="#dcdcdc">roundTo</font></span><font color="#dadada">&nbsp;</font><span style="color: "><font color="#b4b4b4">=</font></span><font color="#dadada">&nbsp;</font><span style="color: "><font color="#4ec9b0">IntPtr</font></span><span style="color: "><font color="#b4b4b4">.</font></span><span style="color: "><font color="#dcdcdc">Size</font></span><font color="#dadada">&nbsp;</font><span style="color: "><font color="#b4b4b4">-</font></span><font color="#dadada">&nbsp;</font><span style="color: "><font color="#b5cea8">1</font></span><span style="color: "><font color="#dcdcdc">;</font></span><br><font color="#dadada">&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">return</font></span><font color="#dadada">&nbsp;</font><font color="#dcdcdc"><span style="color: ">(</span><span style="color: ">sizeCandidate</span></font><font color="#dadada">&nbsp;</font><span style="color: "><font color="#b4b4b4">+</font></span><font color="#dadada">&nbsp;</font><font color="#dcdcdc"><span style="color: ">roundTo</span><span style="color: ">)</span></font><font color="#dadada">&nbsp;</font><span style="color: "><font color="#b4b4b4">&amp;</font></span><font color="#dadada">&nbsp;</font><span style="color: "><font color="#dcdcdc">(</font></span><span style="color: "><font color="#b4b4b4">~</font></span></font><font face="Consolas"><font color="#dcdcdc"><span style="color: ">roundTo</span><span style="color: ">)</span><span style="color: ">;</span><br><span style="color: ">}</span></font><br><font color="#dadada"> </font><br></font><font face="Consolas"><br><span style="color: "><font color="#569cd6">public</font></span><font color="#dadada">&nbsp;</font><span style="color: "><font color="#569cd6">static</font></span><font color="#dadada">&nbsp;</font><span style="color: "><font color="#569cd6">int</font></span><font color="#dadada">&nbsp;</font><font color="#dcdcdc"><span style="color: ">GetFieldSize</span><span style="color: ">(</span></font><span style="color: "><font color="#4ec9b0">Type</font></span><font color="#dadada">&nbsp;</font></font><font face="Consolas"><font color="#dcdcdc"><span style="color: ">t</span><span style="color: ">)</span><br><span style="color: ">{</span></font><br><font color="#dadada">&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">if</font></span><font color="#dadada">&nbsp;</font><font color="#dcdcdc"><span style="color: ">(</span><span style="color: ">t</span></font><span style="color: "><font color="#b4b4b4">.</font></span><font color="#dcdcdc"><span style="color: ">IsValueType</span><span style="color: ">)</span></font><br><font color="#dadada">&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#dcdcdc">{</font></span><br><font color="#dadada">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">return</font></span><font color="#dadada">&nbsp;</font><font color="#dcdcdc"><span style="color: ">GetSizeOfValueTypeInstance</span><span style="color: ">(</span><span style="color: ">t</span><span style="color: ">);</span></font><br><font color="#dadada">&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#dcdcdc">}</font></span><br></font></font><font face="Consolas"><font style="font-size: 10pt"><font color="#dadada"> <br>&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">return</font></span><font color="#dadada">&nbsp;</font><span style="color: "><font color="#4ec9b0">IntPtr</font></span><span style="color: "><font color="#b4b4b4">.</font></span><font color="#dcdcdc"><span style="color: ">Size</span><span style="color: ">;</span><br></font></font><span style="color: "><font style="font-size: 10pt" color="#dcdcdc">}</font></span></font></pre>
<p>We have enough information to get a proper layout information for any type instance at runtime. 
<h4>Inspecting a value type layout at runtime</h4>
<p>Let's start with value types and inspect the following struct:<pre style="font-family: ; background: #1e1e1e; color: "><font face="Consolas"><span style="color: "><font color="#569cd6"><font style="font-size: 10pt">public</font></font></span><font style="font-size: 10pt"><font color="#dadada">&nbsp;</font><span style="color: "><font color="#569cd6">struct</font></span><font color="#dadada">&nbsp;</font><span style="color: "><font color="#4ec9b0">NotAlignedStruct</font></span><br><span style="color: "><font color="#dcdcdc">{</font></span><br><font color="#dadada">&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">public</font></span><font color="#dadada">&nbsp;</font><span style="color: "><font color="#569cd6">byte</font></span><font color="#dadada">&nbsp;</font><font color="#dcdcdc"><span style="color: ">m_byte1</span><span style="color: ">;</span></font><br><font color="#dadada">&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">public</font></span><font color="#dadada">&nbsp;</font><span style="color: "><font color="#569cd6">int</font></span><font color="#dadada">&nbsp;</font><font color="#dcdcdc"><span style="color: ">m_int</span><span style="color: ">;</span></font><br><font color="#dadada">&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">public</font></span><font color="#dadada">&nbsp;</font><span style="color: "><font color="#569cd6">byte</font></span><font color="#dadada">&nbsp;</font><font color="#dcdcdc"><span style="color: ">m_byte2</span><span style="color: ">;</span></font><br><font color="#dadada">&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">public</font></span><font color="#dadada">&nbsp;</font><span style="color: "><font color="#569cd6">short</font></span><font color="#dadada">&nbsp;</font><font color="#dcdcdc"><span style="color: ">m_short</span><span style="color: ">;</span><br></font></font><span style="color: "><font style="font-size: 10pt" color="#dcdcdc">}</font></span></font></pre>
<p>Here is a result of <a href="https://github.com/SergeyTeplyakov/ObjectLayoutInspector/blob/master/src/ObjectLayoutInspector/ObjectLayoutInspector/TypeLayout.cs#L20"><code>TypeLayout.Print&lt;NotAlignedStruct&gt;()</code></a> method call:<pre style="font-family: ; background: #1e1e1e; color: "><span style="color: "><font face="Consolas"><font style="font-size: 10pt" color="#57a64a"> Size: 12. Paddings: 4 (%33 of empty space)<br>|================================|<br>|&nbsp;&nbsp;&nbsp;&nbsp; 0: Byte m_byte1 (1 byte)&nbsp;&nbsp; |<br>|--------------------------------|<br>|&nbsp;&nbsp; 1-3: padding (3 bytes)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |<br>|--------------------------------|<br>|&nbsp;&nbsp; 4-7: Int32 m_int (4 bytes)&nbsp;&nbsp; |<br>|--------------------------------|<br>|&nbsp;&nbsp;&nbsp;&nbsp; 8: Byte m_byte2 (1 byte)&nbsp;&nbsp; |<br>|--------------------------------|<br>|&nbsp;&nbsp;&nbsp;&nbsp; 9: padding (1 byte)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |<br>|--------------------------------|<br>| 10-11: Int16 m_short (2 bytes) |<br>|================================|</font></font></span></pre>
<p>By default, a user-defined struct has the 'sequential' layout with <code>Pack</code> equal to <code>0</code>. Here is a rule that <a href="https://msdn.microsoft.com/en-us/library/system.runtime.interopservices.structlayoutattribute.pack(v=vs.110).aspx">the CLR follows</a>: 
<p><em>Each field must align with fields of its own size (1, 2, 4, 8, etc., bytes) or the alignment of the type, whichever is smaller. Because the default alignment of the type is the size of its largest element, which is greater than or equal to all other field lengths, this usually means that fields are aligned by their size. For example, even if the largest field in a type is a 64-bit (8-byte) integer or the Pack field is set to 8, Byte fields align on 1-byte boundaries, Int16 fields align on 2-byte boundaries, and Int32 fields align on 4-byte boundaries.</em> 
<p>In this case, the alignment is equal to <code>4</code> causing a reasonable amount of overhead. We can change the <code>Pack</code> to 1, but we can get a performance degradation due to unaligned memory operations. Instead we can use <a href="https://msdn.microsoft.com/en-us/library/system.runtime.interopservices.layoutkind(v=vs.110).aspx"><code>LayoutKind.Auto</code></a> to allow the CLR to figure out the best layout:<pre style="font-family: ; background: #1e1e1e; color: "><font face="Consolas"><span style="color: "><font color="#dcdcdc"><font style="font-size: 10pt">[</font></font></span><font style="font-size: 10pt"><span style="color: "><font color="#4ec9b0">StructLayout</font></span><span style="color: "><font color="#dcdcdc">(</font></span><span style="color: "><font color="#b8d7a3">LayoutKind</font></span><span style="color: "><font color="#b4b4b4">.</font></span><font color="#dcdcdc"><span style="color: ">Auto</span><span style="color: ">)]</span></font><br><span style="color: "><font color="#569cd6">public</font></span><font color="#dadada">&nbsp;</font><span style="color: "><font color="#569cd6">struct</font></span><font color="#dadada">&nbsp;</font><span style="color: "><font color="#4ec9b0">NotAlignedStructWithAutoLayout</font></span><br><span style="color: "><font color="#dcdcdc">{</font></span><br><font color="#dadada">&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">public</font></span><font color="#dadada">&nbsp;</font><span style="color: "><font color="#569cd6">byte</font></span><font color="#dadada">&nbsp;</font><font color="#dcdcdc"><span style="color: ">m_byte1</span><span style="color: ">;</span></font><br><font color="#dadada">&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">public</font></span><font color="#dadada">&nbsp;</font><span style="color: "><font color="#569cd6">int</font></span><font color="#dadada">&nbsp;</font><font color="#dcdcdc"><span style="color: ">m_int</span><span style="color: ">;</span></font><br></font></font><font face="Consolas"><font style="font-size: 10pt"><font color="#dadada"> <br>&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">public</font></span><font color="#dadada">&nbsp;</font><span style="color: "><font color="#569cd6">byte</font></span><font color="#dadada">&nbsp;</font><font color="#dcdcdc"><span style="color: ">m_byte2</span><span style="color: ">;</span></font><br><font color="#dadada">&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">public</font></span><font color="#dadada">&nbsp;</font><span style="color: "><font color="#569cd6">short</font></span><font color="#dadada">&nbsp;</font><font color="#dcdcdc"><span style="color: ">m_short</span><span style="color: ">;</span><br></font></font><span style="color: "><font style="font-size: 10pt" color="#dcdcdc">}</font></span></font></pre><pre style="font-family: ; background: #1e1e1e; color: "><span style="color: "><font face="Consolas"><font style="font-size: 10pt" color="#57a64a">Size: 8. Paddings: 0 (%0 of empty space)<br>|================================|<br>|&nbsp;&nbsp; 0-3: Int32 m_int (4 bytes)&nbsp;&nbsp; |<br>|--------------------------------|<br>|&nbsp;&nbsp; 4-5: Int16 m_short (2 bytes) |<br>|--------------------------------|<br>|&nbsp;&nbsp;&nbsp;&nbsp; 6: Byte m_byte1 (1 byte)&nbsp;&nbsp; |<br>|--------------------------------|<br>|&nbsp;&nbsp;&nbsp;&nbsp; 7: Byte m_byte2 (1 byte)&nbsp;&nbsp; |<br>|================================|</font></font></span></pre>
<p><strong>Please, keep in mind</strong> that the sequential layout for both value types and reference types is only possible if a type doesn't have "pointers" in it. If a struct or a class has at least one field of a reference type, the layout is automatically changed to <code>LayoutKind.Auto</code>. 
<h4>Inspecting a reference type layout at runtime</h4>
<p>There are two main differences between the layout of a reference type and a value type. First, each "object" instance has a header and a method table pointer. And second, the default layout for "objects" is automatic not sequential. And similar to value types, the sequential layout is possible only for classes which don't have any fields of reference types. 
<p>Method <a href="https://github.com/SergeyTeplyakov/ObjectLayoutInspector/blob/master/src/ObjectLayoutInspector/ObjectLayoutInspector/TypeLayout.cs#L20"><code>TypeLayout.PrintLayout&lt;T&gt;(bool recursively = true)</code></a> takes an argument that allows to print the nested types as well.<pre style="font-family: ; background: #1e1e1e; color: "><font face="Consolas"><span style="color: "><font color="#569cd6"><font style="font-size: 10pt">public</font></font></span><font style="font-size: 10pt"><font color="#dadada">&nbsp;</font><span style="color: "><font color="#569cd6">class</font></span><font color="#dadada">&nbsp;</font><span style="color: "><font color="#4ec9b0">ClassWithNestedCustomStruct</font></span><br><span style="color: "><font color="#dcdcdc">{</font></span><br><font color="#dadada">&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">public</font></span><font color="#dadada">&nbsp;</font><span style="color: "><font color="#569cd6">byte</font></span><font color="#dadada">&nbsp;</font><font color="#dcdcdc"><span style="color: ">b</span><span style="color: ">;</span></font><br><font color="#dadada">&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">public</font></span><font color="#dadada">&nbsp;</font><span style="color: "><font color="#4ec9b0">NotAlignedStruct</font></span><font color="#dadada">&nbsp;</font><font color="#dcdcdc"><span style="color: ">sp1</span><span style="color: ">;</span><br></font></font><span style="color: "><font style="font-size: 10pt" color="#dcdcdc">}</font></span></font></pre><pre style="font-family: ; background: #1e1e1e; color: "><span style="color: "><font face="Consolas"><font style="font-size: 10pt" color="#57a64a">Size: 40. Paddings: 11 (%27 of empty space)<br>|========================================|<br>| Object Header (8 bytes)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |<br>|----------------------------------------|<br>| Method Table Ptr (8 bytes)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |<br>|========================================|<br>|&nbsp;&nbsp;&nbsp;&nbsp; 0: Byte b (1 byte)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |<br>|----------------------------------------|<br>|&nbsp;&nbsp; 1-7: padding (7 bytes)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |<br>|----------------------------------------|<br>|&nbsp; 8-19: NotAlignedStruct sp1 (12 bytes) |<br>| |================================|&nbsp;&nbsp;&nbsp;&nbsp; |<br>| |&nbsp;&nbsp;&nbsp;&nbsp; 0: Byte m_byte1 (1 byte)&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp; |<br>| |--------------------------------|&nbsp;&nbsp;&nbsp;&nbsp; |<br>| |&nbsp;&nbsp; 1-3: padding (3 bytes)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp; |<br>| |--------------------------------|&nbsp;&nbsp;&nbsp;&nbsp; |<br>| |&nbsp;&nbsp; 4-7: Int32 m_int (4 bytes)&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp; |<br>| |--------------------------------|&nbsp;&nbsp;&nbsp;&nbsp; |<br>| |&nbsp;&nbsp;&nbsp;&nbsp; 8: Byte m_byte2 (1 byte)&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp; |<br>| |--------------------------------|&nbsp;&nbsp;&nbsp;&nbsp; |<br>| |&nbsp;&nbsp;&nbsp;&nbsp; 9: padding (1 byte)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp; |<br>| |--------------------------------|&nbsp;&nbsp;&nbsp;&nbsp; |<br>| | 10-11: Int16 m_short (2 bytes) |&nbsp;&nbsp;&nbsp;&nbsp; |<br>| |================================|&nbsp;&nbsp;&nbsp;&nbsp; |<br>|----------------------------------------|<br>| 20-23: padding (4 bytes)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |<br>|========================================|</font></font></span></pre>
<h4>The cost of wrapping a struct</h4>
<p>Even though the type layout is pretty straightforward, I've found one interesting aspect. 
<p>I was investigating a memory issue in my project recently and I noticed something strange: the sum of all fields of a managed object was higher than the size of the instance. I roughly knew the rules how the CLR lays out fields so I was puzzled. I've started working on this tool to understand that issue. 
<p>I've narrowed down the issue to the following case:<pre style="font-family: ; background: #1e1e1e; color: "><font face="Consolas"><span style="color: "><font color="#569cd6"><font style="font-size: 10pt">internal</font></font></span><font style="font-size: 10pt"><font color="#dadada">&nbsp;</font><span style="color: "><font color="#569cd6">struct</font></span><font color="#dadada">&nbsp;</font><span style="color: "><font color="#4ec9b0">ByteWrapper</font></span><br><span style="color: "><font color="#dcdcdc">{</font></span><br><font color="#dadada">&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">public</font></span><font color="#dadada">&nbsp;</font><span style="color: "><font color="#569cd6">byte</font></span><font color="#dadada">&nbsp;</font></font></font><font face="Consolas"><font style="font-size: 10pt"><font color="#dcdcdc"><span style="color: ">b</span><span style="color: ">;</span><br><span style="color: ">}</span></font><br><font color="#dadada"> </font><br><span style="color: "><font color="#569cd6">internal</font></span><font color="#dadada">&nbsp;</font><span style="color: "><font color="#569cd6">class</font></span><font color="#dadada">&nbsp;</font><span style="color: "><font color="#4ec9b0">ClassWithByteWrappers</font></span><br><span style="color: "><font color="#dcdcdc">{</font></span><br><font color="#dadada">&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">public</font></span><font color="#dadada">&nbsp;</font><span style="color: "><font color="#4ec9b0">ByteWrapper</font></span><font color="#dadada">&nbsp;</font><font color="#dcdcdc"><span style="color: ">bw1</span><span style="color: ">;</span></font><br><font color="#dadada">&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">public</font></span><font color="#dadada">&nbsp;</font><span style="color: "><font color="#4ec9b0">ByteWrapper</font></span><font color="#dadada">&nbsp;</font><font color="#dcdcdc"><span style="color: ">bw2</span><span style="color: ">;</span></font><br><font color="#dadada">&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">public</font></span><font color="#dadada">&nbsp;</font><span style="color: "><font color="#4ec9b0">ByteWrapper</font></span><font color="#dadada">&nbsp;</font><font color="#dcdcdc"><span style="color: ">bw3</span><span style="color: ">;</span><br></font></font><span style="color: "><font style="font-size: 10pt" color="#dcdcdc">}</font></span></font></pre>
<p>&nbsp;<pre style="font-family: ; background: #1e1e1e; color: "><span style="color: "><font face="Consolas"><font style="font-size: 10pt" color="#57a64a">&nbsp;&nbsp;&nbsp;&nbsp; --- Automatic Layout ---&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; --- Sequential Layout ---&nbsp;&nbsp;&nbsp;&nbsp; <br>Size: 24 bytes. Paddings: 21 bytes&nbsp;&nbsp;&nbsp; Size: 8 bytes. Paddings: 5 bytes <br>(%87 of empty space)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (%62 of empty space)<br>|=================================|&nbsp;&nbsp; |=================================|<br>| Object Header (8 bytes)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp; | Object Header (8 bytes)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |<br>|---------------------------------|&nbsp;&nbsp; |---------------------------------|<br>| Method Table Ptr (8 bytes)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp; | Method Table Ptr (8 bytes)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |<br>|=================================|&nbsp;&nbsp; |=================================|<br>|&nbsp;&nbsp;&nbsp;&nbsp; 0: ByteWrapper bw1 (1 byte) |&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp; 0: ByteWrapper bw1 (1 byte) |<br>|---------------------------------|&nbsp;&nbsp; |---------------------------------|<br>|&nbsp;&nbsp; 1-7: padding (7 bytes)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp; 1: ByteWrapper bw2 (1 byte) |<br>|---------------------------------|&nbsp;&nbsp; |---------------------------------|<br>|&nbsp;&nbsp;&nbsp;&nbsp; 8: ByteWrapper bw2 (1 byte) |&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp; 2: ByteWrapper bw3 (1 byte) |<br>|---------------------------------|&nbsp;&nbsp; |---------------------------------|<br>|&nbsp; 9-15: padding (7 bytes)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp; |&nbsp;&nbsp; 3-7: padding (5 bytes)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |<br>|---------------------------------|&nbsp;&nbsp; |=================================|<br>|&nbsp;&nbsp;&nbsp; 16: ByteWrapper bw3 (1 byte) |<br>|---------------------------------|<br>| 17-23: padding (7 bytes)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |<br>|=================================|</font></font></span></pre>
<p>Even though the size of the <code>ByteWrapper</code> is 1 byte, the CLR aligns each field on the pointer boundaries! <strong>If the type layout is <code>LayoutKind.Auto</code></strong> the CLR will pad each field of a <strong>custom value type</strong>! This means that if you have multiple structs that wrap just a single <code>int</code> or <code>byte</code> and they're widely used in millions of objects, you could have a noticeable memory overhead due to padding! 
<h4>References</h4>
<ul>
<li><a href="https://github.com/SergeyTeplyakov/ObjectLayoutInspector">ObjectLayoutInspector on github</a> 
<li><a href="https://blogs.msdn.microsoft.com/seteplia/2017/05/26/managed-object-internals-part-1-layout/">Managed object internals, Part 1. The Layout</a> 
<li><a href="https://blogs.msdn.microsoft.com/seteplia/2017/09/06/managed-object-internals-part-2-object-header-layout-and-the-cost-of-locking/">Managed object internals, Part 2. Object header layout and the cost of locking</a> 
<li><a href="https://blogs.msdn.microsoft.com/seteplia/2017/09/12/managed-object-internals-part-3-the-layout-of-a-managed-array-3/">Managed object internals, Part 3. The layout of a managed array</a></li></ul>