<p>The Local functions is a new feature in C# 7 that allows defining a function inside another function.
<h4>When to use a local function?</h4>
<p>The main idea of local functions is very similar to anonymous methods: in some cases creating a named function is too expensive in terms of cognitive load on a reader. Sometimes the functionality is inherently local to another function and it makes no sense to pollute the "outer" scope with a separate named entity.
<p>You may think that this feature is redundant because the same behavior can be achieved with anonymous delegates or lambda expressions. But this is not always the case. Anonymous functions have certain restrictions and their performance characteristics can be unsuitable for your scenarios.
<h4>Use Case 1: eager preconditions in iterator blocks</h4>
<p>Here is a simple function that reads a file line by line. Do you know when the <code>ArgumentNullException</code> will be thrown?<pre style="font-family: ; background: #1e1e1e; color: "><font face="Consolas"><span style="color: "><font color="#569cd6"><font style="font-size: 10pt">public</font></font></span><font style="font-size: 10pt"><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">static</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#b8d7a3">IEnumerable</font></span><font color="#dcdcdc">&lt;</font><span style="color: "><font color="#569cd6">string</font></span><font color="#dcdcdc">&gt; ReadLineByLine(</font><span style="color: "><font color="#569cd6">string</font></span></font></font><font style="font-size: 10pt"><font face="Consolas"><font color="#dcdcdc"> fileName)<br>{<br>&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">if</font></span><font color="#dcdcdc"> (</font><span style="color: "><font color="#569cd6">string</font></span><span style="color: "><font color="#b4b4b4">.</font></span><font color="#dcdcdc">IsNullOrEmpty(fileName)) </font><span style="color: "><font color="#569cd6">throw</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">new</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#4ec9b0">ArgumentNullException</font></span><font color="#dcdcdc">(</font><span style="color: "><font color="#569cd6">nameof</font></span></font><font face="Consolas"><font color="#dcdcdc">(fileName));<br>&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">foreach</font></span><font color="#dcdcdc"> (</font><span style="color: "><font color="#569cd6">var</font></span><font color="#dcdcdc"> line </font><span style="color: "><font color="#569cd6">in</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#4ec9b0">File</font></span><span style="color: "><font color="#b4b4b4">.</font></span></font><font face="Consolas"><font color="#dcdcdc">ReadAllLines(fileName))<br>&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">yield</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">return</font></span></font><font face="Consolas"><font color="#dcdcdc"> line;<br>&nbsp;&nbsp;&nbsp; }<br>}<br> <br></font></font></font><font face="Consolas"><font style="font-size: 10pt"><span style="color: "><font color="#57a64a">// When the error will happen?</font></span><br><span style="color: "><font color="#569cd6">string</font></span><font color="#dcdcdc"> fileName </font><span style="color: "><font color="#b4b4b4">=</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">null</font></span><font color="#dcdcdc">;</font><br><span style="color: "><font color="#57a64a">// Here?</font></span><br><span style="color: "><font color="#569cd6">var</font></span><font color="#dcdcdc"> query </font><span style="color: "><font color="#b4b4b4">=</font></span><font color="#dcdcdc"> ReadLineByLine(fileName)</font><span style="color: "><font color="#b4b4b4">.</font></span><font color="#dcdcdc">Select(x </font><span style="color: "><font color="#b4b4b4">=&gt;</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#d69d85">$"</font></span><span style="color: "><font color="#e07a00">\t</font></span><font color="#dcdcdc">{x}</font><span style="color: "><font color="#d69d85">"</font></span><font color="#dcdcdc">)</font><span style="color: "><font color="#b4b4b4">.</font></span><font color="#dcdcdc">Where(l </font><span style="color: "><font color="#b4b4b4">=&gt;</font></span><font color="#dcdcdc"> l</font><span style="color: "><font color="#b4b4b4">.</font></span><font color="#dcdcdc">Length </font><span style="color: "><font color="#b4b4b4">&gt;</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#b5cea8">10</font></span><font color="#dcdcdc">);</font><br><span style="color: "><font color="#57a64a">// Or here?</font></span><br><font color="#dcdcdc">ProcessQuery(query);</font></font></font></pre>
<p>Methods with <code>yield return</code> in their body are special. They called <a href="https://msdn.microsoft.com/en-us/library/65zzykke%28v=vs.100%29.aspx?f=255&amp;MSPPError=-2147217396">Iterator Blocks</a> and they're lazy. This means that the execution of those methods is happening "by demand" and the first block of code in them will be executed only when the client of the method will call <code>MoveNext</code> on the resulting iterator. In our case, it means that the error will happen only in the <code>ProcessQuery</code> method because all the LINQ-operators are lazy as well.
<p>Obviously, the behavior is not desirable because the <code>ProcessQuery</code> method will not have enough information about the context of the <code>ArgumentNullException</code>. So it would be good to throw the exception eagerly - when a client calls <code>ReadLineByLine</code> but not when a client processes the result.
<p>To solve this issue we need to extract the validation logic into a separate method. This is a good candidate for anonymous function but anonymous delegates and lambda expressions do not support iterator blocks (*):
<p>(*) Lambda expressions in <a href="http://VB.NET">VB.NET</a> can have an iterator block.<pre style="font-family: ; background: #1e1e1e; color: "><font face="Consolas"><span style="color: "><font color="#569cd6"><font style="font-size: 10pt">public</font></font></span><font style="font-size: 10pt"><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">static</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#b8d7a3">IEnumerable</font></span><font color="#dcdcdc">&lt;</font><span style="color: "><font color="#569cd6">string</font></span><font color="#dcdcdc">&gt; ReadLineByLine(</font><span style="color: "><font color="#569cd6">string</font></span></font></font><font style="font-size: 10pt"><font face="Consolas"><font color="#dcdcdc"> fileName)<br>{<br>&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">if</font></span><font color="#dcdcdc"> (</font><span style="color: "><font color="#569cd6">string</font></span><span style="color: "><font color="#b4b4b4">.</font></span><font color="#dcdcdc">IsNullOrEmpty(fileName)) </font><span style="color: "><font color="#569cd6">throw</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">new</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#4ec9b0">ArgumentNullException</font></span><font color="#dcdcdc">(</font><span style="color: "><font color="#569cd6">nameof</font></span></font><font face="Consolas"><font color="#dcdcdc">(fileName));<br> <br>&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">return</font></span></font><font face="Consolas"><font color="#dcdcdc"> ReadLineByLineImpl();<br> <br>&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#b8d7a3">IEnumerable</font></span><font color="#dcdcdc">&lt;</font><span style="color: "><font color="#569cd6">string</font></span></font><font face="Consolas"><font color="#dcdcdc">&gt; ReadLineByLineImpl()<br>&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">foreach</font></span><font color="#dcdcdc"> (</font><span style="color: "><font color="#569cd6">var</font></span><font color="#dcdcdc"> line </font><span style="color: "><font color="#569cd6">in</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#4ec9b0">File</font></span><span style="color: "><font color="#b4b4b4">.</font></span></font></font><font face="Consolas"><font style="font-size: 10pt"><font color="#dcdcdc">ReadAllLines(fileName))<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">yield</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">return</font></span><font color="#dcdcdc"> line;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>&nbsp;&nbsp;&nbsp; }<br>}</font></font></font></pre>
<h4>Use Case 2: eager preconditions in async methods</h4>
<p>Async methods have the similar issue with exception handling: any exception thrown in a method marked with <code>async</code> keyword (**) manifests itself in a faulted task:<pre style="font-family: ; background: #1e1e1e; color: "><font face="Consolas"><span style="color: "><font color="#569cd6"><font style="font-size: 10pt">public</font></font></span><font style="font-size: 10pt"><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">static</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">async</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#4ec9b0">Task</font></span><font color="#dcdcdc">&lt;</font><span style="color: "><font color="#569cd6">string</font></span><font color="#dcdcdc">&gt; GetAllTextAsync(</font><span style="color: "><font color="#569cd6">string</font></span></font></font><font style="font-size: 10pt"><font face="Consolas"><font color="#dcdcdc"> fileName)<br>{<br>&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">if</font></span><font color="#dcdcdc"> (</font><span style="color: "><font color="#569cd6">string</font></span><span style="color: "><font color="#b4b4b4">.</font></span><font color="#dcdcdc">IsNullOrEmpty(fileName)) </font><span style="color: "><font color="#569cd6">throw</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">new</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#4ec9b0">ArgumentNullException</font></span><font color="#dcdcdc">(</font><span style="color: "><font color="#569cd6">nameof</font></span></font><font face="Consolas"><font color="#dcdcdc">(fileName));<br>&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">var</font></span><font color="#dcdcdc"> result </font><span style="color: "><font color="#b4b4b4">=</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">await</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#4ec9b0">File</font></span><span style="color: "><font color="#b4b4b4">.</font></span></font><font face="Consolas"><font color="#dcdcdc">ReadAllTextAsync(fileName);<br>&nbsp;&nbsp;&nbsp; Log(</font><span style="color: "><font color="#d69d85">$"Read </font></span><font color="#dcdcdc">{result</font><span style="color: "><font color="#b4b4b4">.</font></span><font color="#dcdcdc">Length}</font><span style="color: "><font color="#d69d85"> lines from '</font></span><font color="#dcdcdc">{fileName}</font><span style="color: "><font color="#d69d85">'"</font></span></font><font face="Consolas"><font color="#dcdcdc">);<br>&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">return</font></span></font><font face="Consolas"><font color="#dcdcdc"> result;<br>}<br> <br></font></font></font><font face="Consolas"><font style="font-size: 10pt"><br><span style="color: "><font color="#569cd6">string</font></span><font color="#dcdcdc"> fileName </font><span style="color: "><font color="#b4b4b4">=</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">null</font></span><font color="#dcdcdc">;</font><br><span style="color: "><font color="#57a64a">// No exceptions</font></span><br><span style="color: "><font color="#569cd6">var</font></span><font color="#dcdcdc"> task </font><span style="color: "><font color="#b4b4b4">=</font></span><font color="#dcdcdc"> GetAllTextAsync(fileName);</font><br><span style="color: "><font color="#57a64a">// The following line will throw</font></span><br><span style="color: "><font color="#569cd6">var</font></span><font color="#dcdcdc"> lines </font><span style="color: "><font color="#b4b4b4">=</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">await</font></span><font color="#dcdcdc"> task;</font></font></font></pre>
<p>(**) Technically, <code>async</code> is a contextual keyword, but this doesn't change my point.
<p>You may think that there is not much of a difference when the error is happening. But this is far from the truth. Faulted task means that the method itself failed to do what it was supposed to do. The failed task means that the problem is in the method itself or in one of the building blocks that the method relies on.
<p>Eager preconditions validation is especially important when the resulting task is passed around the system. In this case, it would be extremely hard to understand when and what went wrong. A local function can solve this issue:<pre style="font-family: ; background: #1e1e1e; color: "><font face="Consolas"><span style="color: "><font color="#569cd6"><font style="font-size: 10pt">public</font></font></span><font style="font-size: 10pt"><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">static</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#4ec9b0">Task</font></span><font color="#dcdcdc">&lt;</font><span style="color: "><font color="#569cd6">string</font></span><font color="#dcdcdc">&gt; GetAllTextAsync(</font><span style="color: "><font color="#569cd6">string</font></span></font></font><font style="font-size: 10pt"><font face="Consolas"><font color="#dcdcdc"> fileName)<br>{<br>&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#57a64a">// Eager argument validation</font></span><br><font color="#dcdcdc">&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">if</font></span><font color="#dcdcdc"> (</font><span style="color: "><font color="#569cd6">string</font></span><span style="color: "><font color="#b4b4b4">.</font></span><font color="#dcdcdc">IsNullOrEmpty(fileName)) </font><span style="color: "><font color="#569cd6">throw</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">new</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#4ec9b0">ArgumentNullException</font></span><font color="#dcdcdc">(</font><span style="color: "><font color="#569cd6">nameof</font></span></font><font face="Consolas"><font color="#dcdcdc">(fileName));<br>&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">return</font></span></font><font face="Consolas"><font color="#dcdcdc"> GetAllTextAsync();<br> <br>&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">async</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#4ec9b0">Task</font></span><font color="#dcdcdc">&lt;</font><span style="color: "><font color="#569cd6">string</font></span></font><font face="Consolas"><font color="#dcdcdc">&gt; GetAllTextAsync()<br>&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">var</font></span><font color="#dcdcdc"> result </font><span style="color: "><font color="#b4b4b4">=</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">await</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#4ec9b0">File</font></span><span style="color: "><font color="#b4b4b4">.</font></span></font><font face="Consolas"><font color="#dcdcdc">ReadAllTextAsync(fileName);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Log(</font><span style="color: "><font color="#d69d85">$"Read </font></span><font color="#dcdcdc">{result</font><span style="color: "><font color="#b4b4b4">.</font></span><font color="#dcdcdc">Length}</font><span style="color: "><font color="#d69d85"> lines from '</font></span><font color="#dcdcdc">{fileName}</font><span style="color: "><font color="#d69d85">'"</font></span></font></font><font face="Consolas"><font style="font-size: 10pt"><font color="#dcdcdc">);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">return</font></span><font color="#dcdcdc"> result;<br>&nbsp;&nbsp;&nbsp; }<br>}</font></font></font></pre>
<h4>Use Case 3: local function with iterator blocks</h4>
<p>I found very annoying that you can't use iterators inside a lambda expression. Here is a simple example: if you want to get all the fields in the type hierarchy (including the private once) you have to traverse the inheritance hierarchy manually. But the traversal logic is method-specific and should be kept as local as possible:<pre style="font-family: ; background: #1e1e1e; color: "><font face="Consolas"><span style="color: "><font color="#569cd6"><font style="font-size: 10pt">public</font></font></span><font style="font-size: 10pt"><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">static</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#4ec9b0">FieldInfo</font></span><font color="#dcdcdc">[] GetAllDeclaredFields(</font><span style="color: "><font color="#4ec9b0">Type</font></span></font></font><font style="font-size: 10pt"><font face="Consolas"><font color="#dcdcdc"> type)<br>{<br>&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">var</font></span><font color="#dcdcdc"> flags </font><span style="color: "><font color="#b4b4b4">=</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#b8d7a3">BindingFlags</font></span><span style="color: "><font color="#b4b4b4">.</font></span><font color="#dcdcdc">Instance </font><span style="color: "><font color="#b4b4b4">|</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#b8d7a3">BindingFlags</font></span><span style="color: "><font color="#b4b4b4">.</font></span><font color="#dcdcdc">Public </font><span style="color: "><font color="#b4b4b4">|</font></span><br><font color="#dcdcdc">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#b8d7a3">BindingFlags</font></span><span style="color: "><font color="#b4b4b4">.</font></span><font color="#dcdcdc">NonPublic </font><span style="color: "><font color="#b4b4b4">|</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#b8d7a3">BindingFlags</font></span><span style="color: "><font color="#b4b4b4">.</font></span></font><font face="Consolas"><font color="#dcdcdc">DeclaredOnly;<br>&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">return</font></span></font><font face="Consolas"><font color="#dcdcdc"> TraverseBaseTypeAndSelf(type)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#b4b4b4">.</font></span><font color="#dcdcdc">SelectMany(t </font><span style="color: "><font color="#b4b4b4">=&gt;</font></span><font color="#dcdcdc"> t</font><span style="color: "><font color="#b4b4b4">.</font></span></font><font face="Consolas"><font color="#dcdcdc">GetFields(flags))<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#b4b4b4">.</font></span></font><font face="Consolas"><font color="#dcdcdc">ToArray();<br> <br>&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#b8d7a3">IEnumerable</font></span><font color="#dcdcdc">&lt;</font><span style="color: "><font color="#4ec9b0">Type</font></span><font color="#dcdcdc">&gt; TraverseBaseTypeAndSelf(</font><span style="color: "><font color="#4ec9b0">Type</font></span></font><font face="Consolas"><font color="#dcdcdc"> t)<br>&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">while</font></span><font color="#dcdcdc"> (t </font><span style="color: "><font color="#b4b4b4">!=</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">null</font></span></font><font face="Consolas"><font color="#dcdcdc">)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">yield</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">return</font></span></font></font><font face="Consolas"><font style="font-size: 10pt"><font color="#dcdcdc"> t;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; t </font><span style="color: "><font color="#b4b4b4">=</font></span><font color="#dcdcdc"> t</font><span style="color: "><font color="#b4b4b4">.</font></span><font color="#dcdcdc">BaseType;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>&nbsp;&nbsp;&nbsp; }<br>}</font></font></font></pre>
<h4>Use Case 4: recursive anonymous method</h4>
<p>Anonymous functions can't reference itself by default. To work around this restriction you should declare a local variable of a delegate type and then capture that local variable inside the lambda expression or anonymous delegate:<pre style="font-family: ; background: #1e1e1e; color: "><font face="Consolas"><span style="color: "><font color="#569cd6"><font style="font-size: 10pt">public</font></font></span><font style="font-size: 10pt"><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">static</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#4ec9b0">List</font></span><font color="#dcdcdc">&lt;</font><span style="color: "><font color="#4ec9b0">Type</font></span><font color="#dcdcdc">&gt; BaseTypesAndSelf(</font><span style="color: "><font color="#4ec9b0">Type</font></span></font></font><font style="font-size: 10pt"><font face="Consolas"><font color="#dcdcdc"> type)<br>{<br>&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#4ec9b0">Action</font></span><font color="#dcdcdc">&lt;</font><span style="color: "><font color="#4ec9b0">List</font></span><font color="#dcdcdc">&lt;</font><span style="color: "><font color="#4ec9b0">Type</font></span><font color="#dcdcdc">&gt;, </font><span style="color: "><font color="#4ec9b0">Type</font></span><font color="#dcdcdc">&gt; addBaseType </font><span style="color: "><font color="#b4b4b4">=</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">null</font></span></font><font face="Consolas"><font color="#dcdcdc">;<br>&nbsp;&nbsp;&nbsp; addBaseType </font><span style="color: "><font color="#b4b4b4">=</font></span><font color="#dcdcdc"> (lst, t) </font><span style="color: "><font color="#b4b4b4">=&gt;</font></span><br></font><font face="Consolas"><font color="#dcdcdc">&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lst</font><span style="color: "><font color="#b4b4b4">.</font></span></font><font face="Consolas"><font color="#dcdcdc">Add(t);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">if</font></span><font color="#dcdcdc"> (t</font><span style="color: "><font color="#b4b4b4">.</font></span><font color="#dcdcdc">BaseType </font><span style="color: "><font color="#b4b4b4">!=</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">null</font></span></font><font face="Consolas"><font color="#dcdcdc">)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; addBaseType(lst, t</font><span style="color: "><font color="#b4b4b4">.</font></span></font><font face="Consolas"><font color="#dcdcdc">BaseType);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>&nbsp;&nbsp;&nbsp; };<br> <br>&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">var</font></span><font color="#dcdcdc"> result </font><span style="color: "><font color="#b4b4b4">=</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">new</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#4ec9b0">List</font></span><font color="#dcdcdc">&lt;</font><span style="color: "><font color="#4ec9b0">Type</font></span></font></font><font face="Consolas"><font style="font-size: 10pt"><font color="#dcdcdc">&gt;();<br>&nbsp;&nbsp;&nbsp; addBaseType(result, type);<br>&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">return</font></span><font color="#dcdcdc"> result;<br>}</font></font></font></pre>
<p>This approach is not very readable and similar solution with local function feels way more natural:<pre style="font-family: ; background: #1e1e1e; color: "><font face="Consolas"><span style="color: "><font color="#569cd6"><font style="font-size: 10pt">public</font></font></span><font style="font-size: 10pt"><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">static</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#4ec9b0">List</font></span><font color="#dcdcdc">&lt;</font><span style="color: "><font color="#4ec9b0">Type</font></span><font color="#dcdcdc">&gt; BaseTypesAndSelf(</font><span style="color: "><font color="#4ec9b0">Type</font></span></font></font><font style="font-size: 10pt"><font face="Consolas"><font color="#dcdcdc"> type)<br>{<br>&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">return</font></span><font color="#dcdcdc"> AddBaseType(</font><span style="color: "><font color="#569cd6">new</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#4ec9b0">List</font></span><font color="#dcdcdc">&lt;</font><span style="color: "><font color="#4ec9b0">Type</font></span></font><font face="Consolas"><font color="#dcdcdc">&gt;(), type);<br> <br>&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#4ec9b0">List</font></span><font color="#dcdcdc">&lt;</font><span style="color: "><font color="#4ec9b0">Type</font></span><font color="#dcdcdc">&gt; AddBaseType(</font><span style="color: "><font color="#4ec9b0">List</font></span><font color="#dcdcdc">&lt;</font><span style="color: "><font color="#4ec9b0">Type</font></span><font color="#dcdcdc">&gt; lst, </font><span style="color: "><font color="#4ec9b0">Type</font></span></font><font face="Consolas"><font color="#dcdcdc"> t)<br>&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lst</font><span style="color: "><font color="#b4b4b4">.</font></span></font><font face="Consolas"><font color="#dcdcdc">Add(t);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">if</font></span><font color="#dcdcdc"> (t</font><span style="color: "><font color="#b4b4b4">.</font></span><font color="#dcdcdc">BaseType </font><span style="color: "><font color="#b4b4b4">!=</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">null</font></span></font><font face="Consolas"><font color="#dcdcdc">)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; AddBaseType(lst, t</font><span style="color: "><font color="#b4b4b4">.</font></span></font></font><font face="Consolas"><font style="font-size: 10pt"><font color="#dcdcdc">BaseType);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">return</font></span><font color="#dcdcdc"> lst;<br>&nbsp;&nbsp;&nbsp; }<br>}</font></font></font></pre>
<h4>Use Case 5: when allocations matters</h4>
<p>If you ever work on a performance critical application, then you know that anonymous methods are not cheap:
<ul>
<li>Overhead of a delegate invocation (very very small, but it does exist). 
<li><strong>2 heap allocations</strong> if a lambda captures local variable or argument of enclosing method (one for closure instance and another one for a delegate itself). 
<li><strong>1 heap allocation</strong> if a lambda captures an enclosing instance state (just a delegate allocation). 
<li><strong>0 heap allocations</strong> only if a lambda does not capture anything or captures a static state.</li></ul>
<p>But allocation pattern for local functions is different.<pre style="font-family: ; background: #1e1e1e; color: "><font face="Consolas"><span style="color: "><font color="#569cd6"><font style="font-size: 10pt">public</font></font></span><font style="font-size: 10pt"><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">void</font></span><font color="#dcdcdc"> Foo(</font><span style="color: "><font color="#569cd6">int</font></span></font></font><font style="font-size: 10pt"><font face="Consolas"><font color="#dcdcdc"> arg)<br>{<br>&nbsp;&nbsp;&nbsp; PrintTheArg();<br>&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">return</font></span></font><font face="Consolas"><font color="#dcdcdc">;<br>&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">void</font></span></font></font><font face="Consolas"><font style="font-size: 10pt"><font color="#dcdcdc"> PrintTheArg()<br>&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#4ec9b0">Console</font></span><span style="color: "><font color="#b4b4b4">.</font></span><font color="#dcdcdc">WriteLine(arg);<br>&nbsp;&nbsp;&nbsp; }<br>}</font></font></font></pre>
<p>If a local function captures a local variable or an argument then the C# compiler generates a special closure struct, instantiates it and passes it by reference to a generated static method:<pre style="font-family: ; background: #1e1e1e; color: "><font face="Consolas"><span style="color: "><font color="#569cd6"><font style="font-size: 10pt">internal</font></font></span><font style="font-size: 10pt"><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">struct</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#4ec9b0">c__DisplayClass0_0</font></span><br></font></font><font style="font-size: 10pt"><font face="Consolas"><font color="#dcdcdc">{<br>&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">public</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">int</font></span></font><font face="Consolas"><font color="#dcdcdc"> arg;<br>}<br> </font><br><span style="color: "><font color="#569cd6">public</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">void</font></span><font color="#dcdcdc"> Foo(</font><span style="color: "><font color="#569cd6">int</font></span></font><font face="Consolas"><font color="#dcdcdc"> arg)<br>{<br>&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#57a64a">// Closure instantiation</font></span><br><font color="#dcdcdc">&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">var</font></span><font color="#dcdcdc"> c__DisplayClass0_ </font><span style="color: "><font color="#b4b4b4">=</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">new</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#4ec9b0">c__DisplayClass0_0</font></span><font color="#dcdcdc">() { arg </font><span style="color: "><font color="#b4b4b4">=</font></span></font><font face="Consolas"><font color="#dcdcdc"> arg };<br>&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#57a64a">// Method invocation with a closure passed by ref</font></span><br><font color="#dcdcdc">&nbsp;&nbsp;&nbsp; Foo_g__PrintTheArg0_0(</font><span style="color: "><font color="#569cd6">ref</font></span></font><font face="Consolas"><font color="#dcdcdc"> c__DisplayClass0_);<br>}<br> </font><br><span style="color: "><font color="#569cd6">internal</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">static</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">void</font></span><font color="#dcdcdc"> Foo_g__PrintTheArg0_0(</font><span style="color: "><font color="#569cd6">ref</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#4ec9b0">c__DisplayClass0_0</font></span></font></font><font face="Consolas"><font style="font-size: 10pt"><font color="#dcdcdc"> ptr)<br>{<br>&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#4ec9b0">Console</font></span><span style="color: "><font color="#b4b4b4">.</font></span><font color="#dcdcdc">WriteLine(ptr</font><span style="color: "><font color="#b4b4b4">.</font></span><font color="#dcdcdc">arg);<br>}</font></font></font></pre>
<p>(The compiler generate names with invalid characters like <code>&lt;</code> and <code>&gt;</code>. To improve readability I've changed the names and simplified the code a little bit.)
<p>A local function can capture instance state, local variables (***) or arguments. No heap allocation will happen.
<p>(***) Local variables used in a local function should be definitely assigned at the local function declaration site.
<p>There are few cases when a heap allocation will occur:
<ol>
<li>A local function is explicitly or implicitly converted to a delegate.</li></ol>
<p><strong>Only a delegate allocation</strong> will occur if a local function captures static/instance fields but does not capture locals/arguments.<pre style="font-family: ; background: #1e1e1e; color: "><font face="Consolas"><span style="color: "><font color="#569cd6"><font style="font-size: 10pt">public</font></font></span><font style="font-size: 10pt"><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">void</font></span></font></font><font style="font-size: 10pt"><font face="Consolas"><font color="#dcdcdc"> Bar()<br>{<br>&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#57a64a">// Just a delegate allocation</font></span><br><font color="#dcdcdc">&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#4ec9b0">Action</font></span><font color="#dcdcdc"> a </font><span style="color: "><font color="#b4b4b4">=</font></span></font><font face="Consolas"><font color="#dcdcdc"> EmptyFunction;<br>&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">return</font></span></font></font><font face="Consolas"><font style="font-size: 10pt"><font color="#dcdcdc">;<br>&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">void</font></span><font color="#dcdcdc"> EmptyFunction() { }<br>}</font></font></font></pre>
<p><strong>Closure allocation and a delegate allocation</strong> will occur if a local function captures locals/arguments:<pre style="font-family: ; background: #1e1e1e; color: "><font face="Consolas"><span style="color: "><font color="#569cd6"><font style="font-size: 10pt">public</font></font></span><font style="font-size: 10pt"><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">void</font></span><font color="#dcdcdc"> Baz(</font><span style="color: "><font color="#569cd6">int</font></span></font></font><font style="font-size: 10pt"><font face="Consolas"><font color="#dcdcdc"> arg)<br>{<br>&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#57a64a">// Local function captures an enclosing variable.</font></span><br><font color="#dcdcdc">&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#57a64a">// The compiler will instantiate a closure and a delegate</font></span><br><font color="#dcdcdc">&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#4ec9b0">Action</font></span><font color="#dcdcdc"> a </font><span style="color: "><font color="#b4b4b4">=</font></span></font><font face="Consolas"><font color="#dcdcdc"> EmptyFunction;<br>&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">return</font></span></font></font><font face="Consolas"><font style="font-size: 10pt"><font color="#dcdcdc">;<br>&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">void</font></span><font color="#dcdcdc"> EmptyFunction() { </font><span style="color: "><font color="#4ec9b0">Console</font></span><span style="color: "><font color="#b4b4b4">.</font></span><font color="#dcdcdc">WriteLine(arg); }<br>}</font></font></font></pre>
<ol start="2">
<li>A local function captures a local variable/argument and anonymous function captures variable/argument from the same scope.</li></ol>
<p>This case is way more subtle.
<p>The C# compiler generates a different closure type per lexical scope (method arguments and top-level locals reside in the same top-level scope). In the following case the compiler will generate two closure types:<pre style="font-family: ; background: #1e1e1e; color: "><font face="Consolas"><span style="color: "><font color="#569cd6"><font style="font-size: 10pt">public</font></font></span><font style="font-size: 10pt"><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">void</font></span><font color="#dcdcdc"> DifferentScopes(</font><span style="color: "><font color="#569cd6">int</font></span></font></font><font style="font-size: 10pt"><font face="Consolas"><font color="#dcdcdc"> arg)<br>{<br>&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">int</font></span><font color="#dcdcdc"> local </font><span style="color: "><font color="#b4b4b4">=</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#b5cea8">42</font></span></font><font face="Consolas"><font color="#dcdcdc">;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#4ec9b0">Func</font></span><font color="#dcdcdc">&lt;</font><span style="color: "><font color="#569cd6">int</font></span><font color="#dcdcdc">&gt; a </font><span style="color: "><font color="#b4b4b4">=</font></span><font color="#dcdcdc"> () </font><span style="color: "><font color="#b4b4b4">=&gt;</font></span></font><font face="Consolas"><font color="#dcdcdc"> local;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#4ec9b0">Func</font></span><font color="#dcdcdc">&lt;</font><span style="color: "><font color="#569cd6">int</font></span><font color="#dcdcdc">&gt; b </font><span style="color: "><font color="#b4b4b4">=</font></span><font color="#dcdcdc"> () </font><span style="color: "><font color="#b4b4b4">=&gt;</font></span></font></font><font face="Consolas"><font style="font-size: 10pt"><font color="#dcdcdc"> local;<br>&nbsp;&nbsp;&nbsp; }<br> <br>&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#4ec9b0">Func</font></span><font color="#dcdcdc">&lt;</font><span style="color: "><font color="#569cd6">int</font></span><font color="#dcdcdc">&gt; c </font><span style="color: "><font color="#b4b4b4">=</font></span><font color="#dcdcdc"> () </font><span style="color: "><font color="#b4b4b4">=&gt;</font></span><font color="#dcdcdc"> arg;<br>}</font></font></font></pre>
<p>Two different lambda expressions will use the same closure type if they capture locals from the same scope. Lambdas <code>a</code> and <code>b</code> reside in the same closure:<pre style="font-family: ; background: #1e1e1e; color: "><font face="Consolas"><span style="color: "><font color="#569cd6"><font style="font-size: 10pt">private</font></font></span><font style="font-size: 10pt"><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">sealed</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">class</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#4ec9b0">c__DisplayClass0_0</font></span><br></font></font><font style="font-size: 10pt"><font face="Consolas"><font color="#dcdcdc">{<br>&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">public</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">int</font></span></font><font face="Consolas"><font color="#dcdcdc"> local;<br> <br>&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">internal</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">int</font></span></font><font face="Consolas"><font color="#dcdcdc"> DifferentScopes_b__0()<br>&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#57a64a">// Body of the lambda 'a'</font></span><br><font color="#dcdcdc">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">return</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">this</font></span><span style="color: "><font color="#b4b4b4">.</font></span></font><font face="Consolas"><font color="#dcdcdc">local;<br>&nbsp;&nbsp;&nbsp; }<br> <br>&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">internal</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">int</font></span></font><font face="Consolas"><font color="#dcdcdc"> DifferentScopes_b__1()<br>&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#57a64a">// Body of the lambda 'a'</font></span><br><font color="#dcdcdc">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">return</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">this</font></span><span style="color: "><font color="#b4b4b4">.</font></span></font><font face="Consolas"><font color="#dcdcdc">local;<br>&nbsp;&nbsp;&nbsp; }<br>}<br> </font><br><span style="color: "><font color="#569cd6">private</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">sealed</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">class</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#4ec9b0">c__DisplayClass0_1</font></span><br></font><font face="Consolas"><font color="#dcdcdc">{<br>&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">public</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">int</font></span></font><font face="Consolas"><font color="#dcdcdc"> arg;<br> <br>&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">internal</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">int</font></span></font><font face="Consolas"><font color="#dcdcdc"> DifferentScopes_b__2()<br>&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#57a64a">// Body of the lambda 'c'</font></span><br><font color="#dcdcdc">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">return</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">this</font></span><span style="color: "><font color="#b4b4b4">.</font></span></font><font face="Consolas"><font color="#dcdcdc">arg;<br>&nbsp;&nbsp;&nbsp; }<br>}<br> </font><br><span style="color: "><font color="#569cd6">public</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">void</font></span><font color="#dcdcdc"> DifferentScopes(</font><span style="color: "><font color="#569cd6">int</font></span></font><font face="Consolas"><font color="#dcdcdc"> arg)<br>{<br>&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">var</font></span><font color="#dcdcdc"> closure1 </font><span style="color: "><font color="#b4b4b4">=</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">new</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#4ec9b0">c__DisplayClass0_0</font></span><font color="#dcdcdc"> { local </font><span style="color: "><font color="#b4b4b4">=</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#b5cea8">42</font></span></font><font face="Consolas"><font color="#dcdcdc"> };<br>&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">var</font></span><font color="#dcdcdc"> closure2 </font><span style="color: "><font color="#b4b4b4">=</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">new</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#4ec9b0">c__DisplayClass0_1</font></span><font color="#dcdcdc">() { arg </font><span style="color: "><font color="#b4b4b4">=</font></span></font><font face="Consolas"><font color="#dcdcdc"> arg };<br>&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">var</font></span><font color="#dcdcdc"> a </font><span style="color: "><font color="#b4b4b4">=</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">new</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#4ec9b0">Func</font></span><font color="#dcdcdc">&lt;</font><span style="color: "><font color="#569cd6">int</font></span><font color="#dcdcdc">&gt;(closure1</font><span style="color: "><font color="#b4b4b4">.</font></span></font><font face="Consolas"><font color="#dcdcdc">DifferentScopes_b__0);<br>&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">var</font></span><font color="#dcdcdc"> b </font><span style="color: "><font color="#b4b4b4">=</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">new</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#4ec9b0">Func</font></span><font color="#dcdcdc">&lt;</font><span style="color: "><font color="#569cd6">int</font></span><font color="#dcdcdc">&gt;(closure1</font><span style="color: "><font color="#b4b4b4">.</font></span></font></font><font face="Consolas"><font style="font-size: 10pt"><font color="#dcdcdc">DifferentScopes_b__1);<br>&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">var</font></span><font color="#dcdcdc"> c </font><span style="color: "><font color="#b4b4b4">=</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">new</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#4ec9b0">Func</font></span><font color="#dcdcdc">&lt;</font><span style="color: "><font color="#569cd6">int</font></span><font color="#dcdcdc">&gt;(closure2</font><span style="color: "><font color="#b4b4b4">.</font></span><font color="#dcdcdc">DifferentScopes_b__2);<br>}</font></font></font></pre>
<p>In some cases, this behavior can cause some very serious memory-related issues. Here is an example:<pre style="font-family: ; background: #1e1e1e; color: "><font face="Consolas"><span style="color: "><font color="#569cd6"><font style="font-size: 10pt">private</font></font></span><font style="font-size: 10pt"><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#4ec9b0">Func</font></span><font color="#dcdcdc">&lt;</font><span style="color: "><font color="#569cd6">int</font></span><font color="#dcdcdc">&gt; func;</font><br><span style="color: "><font color="#569cd6">public</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">void</font></span><font color="#dcdcdc"> ImplicitCapture(</font><span style="color: "><font color="#569cd6">int</font></span></font></font><font style="font-size: 10pt"><font face="Consolas"><font color="#dcdcdc"> arg)<br>{<br>&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">var</font></span><font color="#dcdcdc"> o </font><span style="color: "><font color="#b4b4b4">=</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">new</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#4ec9b0">VeryExpensiveObject</font></span></font><font face="Consolas"><font color="#dcdcdc">();<br>&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#4ec9b0">Func</font></span><font color="#dcdcdc">&lt;</font><span style="color: "><font color="#569cd6">int</font></span><font color="#dcdcdc">&gt; a </font><span style="color: "><font color="#b4b4b4">=</font></span><font color="#dcdcdc"> () </font><span style="color: "><font color="#b4b4b4">=&gt;</font></span><font color="#dcdcdc"> o</font><span style="color: "><font color="#b4b4b4">.</font></span></font><font face="Consolas"><font color="#dcdcdc">GetHashCode();<br>&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#4ec9b0">Console</font></span><span style="color: "><font color="#b4b4b4">.</font></span></font><font face="Consolas"><font color="#dcdcdc">WriteLine(a());<br> <br>&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#4ec9b0">Func</font></span><font color="#dcdcdc">&lt;</font><span style="color: "><font color="#569cd6">int</font></span><font color="#dcdcdc">&gt; b </font><span style="color: "><font color="#b4b4b4">=</font></span><font color="#dcdcdc"> () </font><span style="color: "><font color="#b4b4b4">=&gt;</font></span></font></font><font face="Consolas"><font style="font-size: 10pt"><font color="#dcdcdc"> arg;<br>&nbsp;&nbsp;&nbsp; func </font><span style="color: "><font color="#b4b4b4">=</font></span><font color="#dcdcdc"> b;<br>}</font></font></font></pre>
<p>It seems that the <code>o</code> variable should be eligible for garbage collection right after the delegate invocation <code>a()</code>. But this is not the case. Two lambda expressions share the same closure type:<pre style="font-family: ; background: #1e1e1e; color: "><font face="Consolas"><span style="color: "><font color="#569cd6"><font style="font-size: 10pt">private</font></font></span><font style="font-size: 10pt"><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">sealed</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">class</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#4ec9b0">c__DisplayClass1_0</font></span><br></font></font><font style="font-size: 10pt"><font face="Consolas"><font color="#dcdcdc">{<br>&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">public</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#4ec9b0">VeryExpensiveObject</font></span></font><font face="Consolas"><font color="#dcdcdc"> o;<br>&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">public</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">int</font></span></font><font face="Consolas"><font color="#dcdcdc"> arg;<br> <br>&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">internal</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">int</font></span></font><font face="Consolas"><font color="#dcdcdc"> ImplicitCapture_b__0()<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#b4b4b4">=&gt;</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">this</font></span><span style="color: "><font color="#b4b4b4">.</font></span><font color="#dcdcdc">o</font><span style="color: "><font color="#b4b4b4">.</font></span></font><font face="Consolas"><font color="#dcdcdc">GetHashCode();<br> <br>&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">internal</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">int</font></span></font><font face="Consolas"><font color="#dcdcdc"> ImplicitCapture_b__1()<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#b4b4b4">=&gt;</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">this</font></span><span style="color: "><font color="#b4b4b4">.</font></span></font><font face="Consolas"><font color="#dcdcdc">arg;<br>}<br> </font><br><span style="color: "><font color="#569cd6">private</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#4ec9b0">Func</font></span><font color="#dcdcdc">&lt;</font><span style="color: "><font color="#569cd6">int</font></span></font><font face="Consolas"><font color="#dcdcdc">&gt; func;<br> </font><br><span style="color: "><font color="#569cd6">public</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">void</font></span><font color="#dcdcdc"> ImplicitCapture(</font><span style="color: "><font color="#569cd6">int</font></span></font><font face="Consolas"><font color="#dcdcdc"> arg)<br>{<br>&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">var</font></span><font color="#dcdcdc"> c__DisplayClass1_ </font><span style="color: "><font color="#b4b4b4">=</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">new</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#4ec9b0">c__DisplayClass1_0</font></span></font><font face="Consolas"><font color="#dcdcdc">()<br>&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; arg </font><span style="color: "><font color="#b4b4b4">=</font></span></font><font face="Consolas"><font color="#dcdcdc"> arg,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; o </font><span style="color: "><font color="#b4b4b4">=</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">new</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#4ec9b0">VeryExpensiveObject</font></span></font><font face="Consolas"><font color="#dcdcdc">()<br>&nbsp;&nbsp;&nbsp; };<br>&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">var</font></span><font color="#dcdcdc"> a </font><span style="color: "><font color="#b4b4b4">=</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">new</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#4ec9b0">Func</font></span><font color="#dcdcdc">&lt;</font><span style="color: "><font color="#569cd6">int</font></span><font color="#dcdcdc">&gt;(c__DisplayClass1_</font><span style="color: "><font color="#b4b4b4">.</font></span></font><font face="Consolas"><font color="#dcdcdc">ImplicitCapture_b__0);<br>&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#4ec9b0">Console</font></span><span style="color: "><font color="#b4b4b4">.</font></span></font><font face="Consolas"><font color="#dcdcdc">WriteLine(func());<br>&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">var</font></span><font color="#dcdcdc"> b </font><span style="color: "><font color="#b4b4b4">=</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">new</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#4ec9b0">Func</font></span><font color="#dcdcdc">&lt;</font><span style="color: "><font color="#569cd6">int</font></span><font color="#dcdcdc">&gt;(c__DisplayClass1_</font><span style="color: "><font color="#b4b4b4">.</font></span></font></font><font face="Consolas"><font style="font-size: 10pt"><font color="#dcdcdc">ImplicitCapture_b__1);<br>&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">this</font></span><span style="color: "><font color="#b4b4b4">.</font></span><font color="#dcdcdc">func </font><span style="color: "><font color="#b4b4b4">=</font></span><font color="#dcdcdc"> b;<br>}</font></font></font></pre>
<p>This means that <strong>the lifetime of the closure instance is bound to the lifetime of the <code>func</code> field</strong>: the closure stays alive until the delegate <code>func</code> is reachable from the application. This can prolong the lifetime of the <code>VeryExpensiveObject</code> drastically causing, basically, a memory leak.
<p>A similar issue happens when a local function and lambda expression captures variables from the same scope. Even if they capture different variables the closure type will be shared causing a heap allocation:<pre style="font-family: ; background: #1e1e1e; color: "><font face="Consolas"><span style="color: "><font color="#569cd6"><font style="font-size: 10pt">public</font></font></span><font style="font-size: 10pt"><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">int</font></span><font color="#dcdcdc"> ImplicitAllocation(</font><span style="color: "><font color="#569cd6">int</font></span></font></font><font style="font-size: 10pt"><font face="Consolas"><font color="#dcdcdc"> arg)<br>{<br>&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">if</font></span><font color="#dcdcdc"> (arg </font><span style="color: "><font color="#b4b4b4">==</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">int</font></span><span style="color: "><font color="#b4b4b4">.</font></span></font><font face="Consolas"><font color="#dcdcdc">MaxValue)<br>&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#57a64a">// This code is effectively unreachable</font></span><br><font color="#dcdcdc">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#4ec9b0">Func</font></span><font color="#dcdcdc">&lt;</font><span style="color: "><font color="#569cd6">int</font></span><font color="#dcdcdc">&gt; a </font><span style="color: "><font color="#b4b4b4">=</font></span><font color="#dcdcdc"> () </font><span style="color: "><font color="#b4b4b4">=&gt;</font></span></font><font face="Consolas"><font color="#dcdcdc"> arg;<br>&nbsp;&nbsp;&nbsp; }<br> <br>&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">int</font></span><font color="#dcdcdc"> local </font><span style="color: "><font color="#b4b4b4">=</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#b5cea8">42</font></span></font><font face="Consolas"><font color="#dcdcdc">;<br>&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">return</font></span></font></font><font face="Consolas"><font style="font-size: 10pt"><font color="#dcdcdc"> Local();<br> <br>&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">int</font></span><font color="#dcdcdc"> Local() </font><span style="color: "><font color="#b4b4b4">=&gt;</font></span><font color="#dcdcdc"> local;<br>}</font></font></font></pre>
<p>Compiles to:<pre style="font-family: ; background: #1e1e1e; color: "><font face="Consolas"><span style="color: "><font color="#569cd6"><font style="font-size: 10pt">private</font></font></span><font style="font-size: 10pt"><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">sealed</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">class</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#4ec9b0">c__DisplayClass0_0</font></span><br></font></font><font style="font-size: 10pt"><font face="Consolas"><font color="#dcdcdc">{<br>&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">public</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">int</font></span></font><font face="Consolas"><font color="#dcdcdc"> arg;<br>&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">public</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">int</font></span></font><font face="Consolas"><font color="#dcdcdc"> local;<br> <br>&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">internal</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">int</font></span></font><font face="Consolas"><font color="#dcdcdc"> ImplicitAllocation_b__0()<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#b4b4b4">=&gt;</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">this</font></span><span style="color: "><font color="#b4b4b4">.</font></span></font><font face="Consolas"><font color="#dcdcdc">arg;<br> <br>&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">internal</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">int</font></span></font><font face="Consolas"><font color="#dcdcdc"> ImplicitAllocation_g__Local1()<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#b4b4b4">=&gt;</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">this</font></span><span style="color: "><font color="#b4b4b4">.</font></span></font><font face="Consolas"><font color="#dcdcdc">local;<br>}<br> </font><br><span style="color: "><font color="#569cd6">public</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">int</font></span><font color="#dcdcdc"> ImplicitAllocation(</font><span style="color: "><font color="#569cd6">int</font></span></font><font face="Consolas"><font color="#dcdcdc"> arg)<br>{<br>&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">var</font></span><font color="#dcdcdc"> c__DisplayClass0_ </font><span style="color: "><font color="#b4b4b4">=</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">new</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#4ec9b0">c__DisplayClass0_0</font></span><font color="#dcdcdc"> { arg </font><span style="color: "><font color="#b4b4b4">=</font></span></font><font face="Consolas"><font color="#dcdcdc"> arg };<br>&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">if</font></span><font color="#dcdcdc"> (c__DisplayClass0_</font><span style="color: "><font color="#b4b4b4">.</font></span><font color="#dcdcdc">arg </font><span style="color: "><font color="#b4b4b4">==</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">int</font></span><span style="color: "><font color="#b4b4b4">.</font></span></font><font face="Consolas"><font color="#dcdcdc">MaxValue)<br>&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">var</font></span><font color="#dcdcdc"> func </font><span style="color: "><font color="#b4b4b4">=</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">new</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#4ec9b0">Func</font></span><font color="#dcdcdc">&lt;</font><span style="color: "><font color="#569cd6">int</font></span><font color="#dcdcdc">&gt;(c__DisplayClass0_</font><span style="color: "><font color="#b4b4b4">.</font></span></font><font face="Consolas"><font color="#dcdcdc">ImplicitAllocation_b__0);<br>&nbsp;&nbsp;&nbsp; }<br>&nbsp;&nbsp;&nbsp; c__DisplayClass0_</font><span style="color: "><font color="#b4b4b4">.</font></span><font color="#dcdcdc">local </font><span style="color: "><font color="#b4b4b4">=</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#b5cea8">42</font></span></font></font><font face="Consolas"><font style="font-size: 10pt"><font color="#dcdcdc">;<br>&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">return</font></span><font color="#dcdcdc"> c__DisplayClass0_</font><span style="color: "><font color="#b4b4b4">.</font></span><font color="#dcdcdc">ImplicitAllocation_g__Local1();<br>}</font></font></font></pre>
<p>As you can see all the locals from the top-level scope now become part of the closure class causing the closure allocation even when a local function and a lambda expression captures different variables.
<h4>Local functions 101</h4>
<p>Here is a list of the most important aspects about local functions in C#:
<ol>
<li>Local functions can define iterators. 
<li>Local functions useful for eager validation for async methods and iterator blocks. 
<li>Local functions can be recursive. 
<li>Local functions are allocation-free if no conversion to delegates is happening. 
<li>Local functions are slightly more efficient than anonymous functions due to a lack of delegate invocation overhead. 
<li>Local functions can be declared after return statement separating main logic from the helpers. 
<li>Local functions can "hide" a function with the same name declared in the outer scope. 
<li>Local functions can be <code>async</code> and/or <code>unsafe</code> no other modifiers are allowed. 
<li>Local functions can't have attributes. 
<li>Local functions are not very IDE friendly: there is no "extract local function refactoring" (yet) and if a code with a local function is partially broken you'll get a lot of "squiggles" in the IDE.</li></ol>
(****) Here is a benchmark and the results: <pre style="font-family: ; background: #1e1e1e; color: "><font face="Consolas"><span style="color: "><font color="#569cd6"><font style="font-size: 10pt">private</font></font></span><font style="font-size: 10pt"><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">static</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">int</font></span><font color="#dcdcdc"> n </font><span style="color: "><font color="#b4b4b4">=</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#b5cea8">42</font></span></font></font><font style="font-size: 10pt"><font face="Consolas"><font color="#dcdcdc">;<br> <br>[</font><span style="color: "><font color="#4ec9b0">Benchmark</font></span><font color="#dcdcdc">]</font><br><span style="color: "><font color="#569cd6">public</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">bool</font></span></font><font face="Consolas"><font color="#dcdcdc"> DelegateInvocation()<br>{<br>&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#4ec9b0">Func</font></span><font color="#dcdcdc">&lt;</font><span style="color: "><font color="#569cd6">bool</font></span><font color="#dcdcdc">&gt; fn </font><span style="color: "><font color="#b4b4b4">=</font></span><font color="#dcdcdc"> () </font><span style="color: "><font color="#b4b4b4">=&gt;</font></span><font color="#dcdcdc"> n </font><span style="color: "><font color="#b4b4b4">==</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#b5cea8">42</font></span></font><font face="Consolas"><font color="#dcdcdc">;<br>&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">return</font></span></font><font face="Consolas"><font color="#dcdcdc"> fn();<br>}<br> <br>[</font><span style="color: "><font color="#4ec9b0">Benchmark</font></span><font color="#dcdcdc">]</font><br><span style="color: "><font color="#569cd6">public</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#569cd6">bool</font></span></font><font face="Consolas"><font color="#dcdcdc"> LocalFunctionInvocation()<br>{<br>&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">return</font></span></font></font><font face="Consolas"><font style="font-size: 10pt"><font color="#dcdcdc"> fn();<br>&nbsp;&nbsp;&nbsp; </font><span style="color: "><font color="#569cd6">bool</font></span><font color="#dcdcdc"> fn() </font><span style="color: "><font color="#b4b4b4">=&gt;</font></span><font color="#dcdcdc"> n </font><span style="color: "><font color="#b4b4b4">==</font></span><font color="#dcdcdc">&nbsp;</font><span style="color: "><font color="#b5cea8">42</font></span><font color="#dcdcdc">;<br>}</font></font></font></pre><pre style="font-family: ; background: #1e1e1e; color: "><span style="color: "><font face="Consolas"><font style="font-size: 10pt" color="#57a64a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Method |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Mean |&nbsp;&nbsp;&nbsp;&nbsp; Error |&nbsp;&nbsp;&nbsp; StdDev | Allocated |<br>------------------------ |----------:|----------:|----------:|----------:|<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DelegateInvocation | 2.3035 ns | 0.0847 ns | 0.0869 ns |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0 B |<br> LocalFunctionInvocation | 0.0142 ns | 0.0176 ns | 0.0137 ns |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0 B |</font></font></span></pre>
<p>Don’t be confused by the difference. It looks huge but I almost never saw that delegate invocation overhead caused a real issue.</p>